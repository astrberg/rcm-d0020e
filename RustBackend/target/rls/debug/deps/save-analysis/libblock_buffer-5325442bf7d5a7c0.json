{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48],"program":"/home/aron/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","block_buffer","/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.7.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=5325442bf7d5a7c0","-C","extra-filename=-5325442bf7d5a7c0","--out-dir","/home/aron/rust/xml_to_mysql/target/rls/debug/deps","-L","dependency=/home/aron/rust/xml_to_mysql/target/rls/debug/deps","--extern","block_padding=/home/aron/rust/xml_to_mysql/target/rls/debug/deps/libblock_padding-da002e83617b56e0.rmeta","--extern","byte_tools=/home/aron/rust/xml_to_mysql/target/rls/debug/deps/libbyte_tools-fdd4d1fb5b10192a.rmeta","--extern","byteorder=/home/aron/rust/xml_to_mysql/target/rls/debug/deps/libbyteorder-d7a19acd88b8f61a.rmeta","--extern","generic_array=/home/aron/rust/xml_to_mysql/target/rls/debug/deps/libgeneric_array-e8f5f260166a7313.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/aron/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,97,114,111,110,47,114,117,115,116,47,120,109,108,95,116,111,95,109,121,115,113,108,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,98,108,111,99,107,95,98,117,102,102,101,114,45,53,51,50,53,52,52,50,98,102,55,100,53,97,55,99,48,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"block_buffer","disambiguator":[12793710550485742644,1656463973963752755]},"crate_root":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.7.0/src","external_crates":[{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.7.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[10798836723055308036,13313936280221541629]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.7.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4173213016744015638,3014784451015659406]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.7.0/src/lib.rs","num":3,"id":{"name":"byteorder","disambiguator":[4516540997660259710,12820207490055886610]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.7.0/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[13653490757311001470,18210972786764511751]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.7.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11944383677982007713,15257420578295466644]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.7.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4959566726620691501,6146722101769139636]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.7.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11525715658488109252,1561200000967009509]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.7.0/src/lib.rs","num":8,"id":{"name":"panic_unwind","disambiguator":[14286758744204974931,8495317743760309751]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.7.0/src/lib.rs","num":9,"id":{"name":"block_padding","disambiguator":[12374842680348501462,5349497695280288228]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.7.0/src/lib.rs","num":10,"id":{"name":"byte_tools","disambiguator":[15433172544198552360,6241961453924554972]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.7.0/src/lib.rs","num":11,"id":{"name":"generic_array","disambiguator":[8687552112810761316,2463039498045684000]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.7.0/src/lib.rs","num":12,"id":{"name":"typenum","disambiguator":[6953377910121057636,12426728190574549991]}}],"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":5362,"line_start":1,"line_end":170,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":5362,"line_start":1,"line_end":170,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.7.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":30},{"krate":0,"index":60},{"krate":0,"index":66},{"krate":0,"index":62},{"krate":0,"index":36},{"krate":0,"index":38}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":349,"byte_end":360,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"BlockBuffer","qualname":"::BlockBuffer","value":"BlockBuffer {  }","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":41}],"decl_id":null,"docs":" Buffer for block processing of data\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":816,"byte_end":821,"line_start":28,"line_end":28,"column_start":12,"column_end":17},"name":"input","qualname":"<BlockBuffer<BlockSize>>::input","value":"fn <F> (&mut self, mut input: &[u8], mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Process data in `input` in blocks of size `BlockSize` using function `f`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":795,"byte_end":804,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2071,"byte_end":2081,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"name":"input_lazy","qualname":"<BlockBuffer<BlockSize>>::input_lazy","value":"fn <F> (&mut self, mut input: &[u8], mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Variant that doesn't flush the buffer until there's additional\n data to be processed. Suitable for tweakable block ciphers\n like Threefish that need to know whether a block is the *last*\n data block before processing it.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2050,"byte_end":2059,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3501,"byte_end":3514,"line_start":107,"line_end":107,"column_start":12,"column_end":25},"name":"len64_padding","qualname":"<BlockBuffer<BlockSize>>::len64_padding","value":"fn <B, F> (&mut self, data_len: u64, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Pad message with 0x80, zeros and 64-bit message length\n in a byte order specified by `B`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3480,"byte_end":3489,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3993,"byte_end":4010,"line_start":122,"line_end":122,"column_start":12,"column_end":29},"name":"len128_padding_be","qualname":"<BlockBuffer<BlockSize>>::len128_padding_be","value":"fn <F> (&mut self, hi: u64, lo: u64, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Pad message with 0x80, zeros and 128-bit message length\n in the big-endian byte order\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3972,"byte_end":3981,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4611,"byte_end":4619,"line_start":139,"line_end":139,"column_start":12,"column_end":20},"name":"pad_with","qualname":"<BlockBuffer<BlockSize>>::pad_with","value":"fn <P> (&mut self) -> Result<&mut GenericArray<u8, BlockSize>, PadError>","parent":null,"children":[],"decl_id":null,"docs":" Pad message with a given padding `P`","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4590,"byte_end":4599,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4902,"byte_end":4906,"line_start":149,"line_end":149,"column_start":12,"column_end":16},"name":"size","qualname":"<BlockBuffer<BlockSize>>::size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return size of the internall buffer in bytes\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4881,"byte_end":4890,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5026,"byte_end":5034,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"name":"position","qualname":"<BlockBuffer<BlockSize>>::position","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return current cursor position\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5005,"byte_end":5014,"line_start":154,"line_end":154,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5167,"byte_end":5176,"line_start":161,"line_end":161,"column_start":12,"column_end":21},"name":"remaining","qualname":"<BlockBuffer<BlockSize>>::remaining","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return number of remaining bytes in the internall buffer\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5146,"byte_end":5155,"line_start":160,"line_end":160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5314,"byte_end":5319,"line_start":167,"line_end":167,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockBuffer<BlockSize>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset buffer by setting cursor position to zero\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5293,"byte_end":5302,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":684,"byte_end":695,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,108,111,99,107,45,98,117,102,102,101,114,45,48,46,55,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":684,"byte_end":695,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":60},"to":{"krate":4294967295,"index":4294967295}}]}