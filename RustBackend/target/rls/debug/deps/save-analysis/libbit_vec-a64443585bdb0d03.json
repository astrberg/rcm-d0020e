{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48],"program":"/home/aron/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bit_vec","/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/bit-vec-0.5.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=a64443585bdb0d03","-C","extra-filename=-a64443585bdb0d03","--out-dir","/home/aron/rust/xml_to_mysql/target/rls/debug/deps","-L","dependency=/home/aron/rust/xml_to_mysql/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/aron/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,97,114,111,110,47,114,117,115,116,47,120,109,108,95,116,111,95,109,121,115,113,108,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,98,105,116,95,118,101,99,45,97,54,52,52,52,51,53,56,53,98,100,98,48,100,48,51,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"bit_vec","disambiguator":[17120955780128648084,12858880618207143164]},"crate_root":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/bit-vec-0.5.0/src","external_crates":[{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/bit-vec-0.5.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[10798836723055308036,13313936280221541629]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/bit-vec-0.5.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4173213016744015638,3014784451015659406]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/bit-vec-0.5.0/src/lib.rs","num":3,"id":{"name":"std","disambiguator":[13653490757311001470,18210972786764511751]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/bit-vec-0.5.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[11944383677982007713,15257420578295466644]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/bit-vec-0.5.0/src/lib.rs","num":5,"id":{"name":"libc","disambiguator":[4959566726620691501,6146722101769139636]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/bit-vec-0.5.0/src/lib.rs","num":6,"id":{"name":"unwind","disambiguator":[11525715658488109252,1561200000967009509]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/bit-vec-0.5.0/src/lib.rs","num":7,"id":{"name":"panic_unwind","disambiguator":[14286758744204974931,8495317743760309751]}}],"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1592,"byte_end":65905,"line_start":31,"line_end":2136,"column_start":1,"column_end":50}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1592,"byte_end":65905,"line_start":31,"line_end":2136,"column_start":1,"column_end":50},"name":"","qualname":"::","value":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/bit-vec-0.5.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":64},{"krate":0,"index":262},{"krate":0,"index":274},{"krate":0,"index":286},{"krate":0,"index":298},{"krate":0,"index":310},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":98},{"krate":0,"index":164},{"krate":0,"index":168},{"krate":0,"index":172},{"krate":0,"index":176},{"krate":0,"index":182},{"krate":0,"index":186},{"krate":0,"index":190},{"krate":0,"index":194},{"krate":0,"index":198},{"krate":0,"index":202},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":204},{"krate":0,"index":212},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":234},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":248},{"krate":0,"index":256},{"krate":0,"index":260}],"decl_id":null,"docs":" Collections implemented with bit vectors.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3186,"byte_end":3196,"line_start":86,"line_end":86,"column_start":1,"column_end":11}}]},{"kind":"Trait","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4077,"byte_end":4085,"line_start":120,"line_end":120,"column_start":11,"column_end":19},"name":"BitBlock","qualname":"::BitBlock","value":"BitBlock: Copy + Add<Self, Output = Self> + Sub<Self, Output = Self> + Shl<usize, Output\n= Self> + Shr<usize, Output = Self> + Not<Output = Self> + BitAnd<Self, Output\n= Self> + BitOr<Self, Output = Self> + BitXor<Self, Output = Self> + Rem<Self,\nOutput = Self> + Eq + Ord + hash::Hash","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62}],"decl_id":null,"docs":" Abstracts over a pile of bits (basically unsigned primitives)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4395,"byte_end":4399,"line_start":136,"line_end":136,"column_start":8,"column_end":12},"name":"bits","qualname":"::BitBlock::bits","value":"fn () -> usize","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" How many bits it has\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4463,"byte_end":4468,"line_start":139,"line_end":139,"column_start":8,"column_end":13},"name":"bytes","qualname":"::BitBlock::bytes","value":"fn () -> usize","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" How many bytes it has\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4446,"byte_end":4455,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4570,"byte_end":4579,"line_start":141,"line_end":141,"column_start":8,"column_end":17},"name":"from_byte","qualname":"::BitBlock::from_byte","value":"fn (byte: u8) -> Self","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Convert a byte into this type (lowest-order bits set)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4658,"byte_end":4668,"line_start":143,"line_end":143,"column_start":8,"column_end":18},"name":"count_ones","qualname":"::BitBlock::count_ones","value":"fn (self) -> usize","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Count the number of 1's in the bitwise repr\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4708,"byte_end":4712,"line_start":145,"line_end":145,"column_start":8,"column_end":12},"name":"zero","qualname":"::BitBlock::zero","value":"fn () -> Self","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Get `0`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4747,"byte_end":4750,"line_start":147,"line_end":147,"column_start":8,"column_end":11},"name":"one","qualname":"::BitBlock::one","value":"fn () -> Self","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":" Get `1`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":72},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6328,"byte_end":6334,"line_start":214,"line_end":214,"column_start":12,"column_end":18},"name":"BitVec","qualname":"::BitVec","value":"BitVec {  }","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":31}],"decl_id":null,"docs":" The bitvector type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8126,"byte_end":8129,"line_start":271,"line_end":271,"column_start":12,"column_end":15},"name":"new","qualname":"<BitVec<u32>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `BitVec`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8105,"byte_end":8114,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8550,"byte_end":8559,"line_start":290,"line_end":290,"column_start":12,"column_end":21},"name":"from_elem","qualname":"<BitVec<u32>>::from_elem","value":"fn (nbits: usize, bit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BitVec` that holds `nbits` elements, setting each element\n to `bit`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8529,"byte_end":8538,"line_start":289,"line_end":289,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9244,"byte_end":9257,"line_start":308,"line_end":308,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<BitVec<u32>>::with_capacity","value":"fn (nbits: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `BitVec` with the specified capacity.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9223,"byte_end":9232,"line_start":307,"line_end":307,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10020,"byte_end":10030,"line_start":330,"line_end":330,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<BitVec<u32>>::from_bytes","value":"fn (bytes: &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\n with the most significant bits of each byte coming first. Each\n bit becomes `true` if equal to 1 or `false` if equal to 0.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11363,"byte_end":11370,"line_start":371,"line_end":371,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<BitVec<u32>>::from_fn","value":"fn <F> (len: usize, mut f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BitVec` of the specified length where the value at each index\n is `f(index)`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11342,"byte_end":11351,"line_start":370,"line_end":370,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12602,"byte_end":12608,"line_start":410,"line_end":410,"column_start":12,"column_end":18},"name":"blocks","qualname":"<BitVec<B>>::blocks","value":"fn (&self) -> Blocks<B>","parent":null,"children":[],"decl_id":null,"docs":" Iterator over the underlying blocks of data\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12581,"byte_end":12590,"line_start":409,"line_end":409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12822,"byte_end":12829,"line_start":419,"line_end":419,"column_start":12,"column_end":19},"name":"storage","qualname":"<BitVec<B>>::storage","value":"fn (&self) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Exposes the raw block storage of this BitVec","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12801,"byte_end":12810,"line_start":418,"line_end":418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13036,"byte_end":13047,"line_start":427,"line_end":427,"column_start":19,"column_end":30},"name":"storage_mut","qualname":"<BitVec<B>>::storage_mut","value":"fn (&mut self) -> &mut Vec<B>","parent":null,"children":[],"decl_id":null,"docs":" Exposes the raw block storage of this BitVec","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13008,"byte_end":13017,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14063,"byte_end":14066,"line_start":460,"line_end":460,"column_start":12,"column_end":15},"name":"get","qualname":"<BitVec<B>>::get","value":"fn (&self, i: usize) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the value at index `i`, or `None` if the index is out of bounds.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14042,"byte_end":14051,"line_start":459,"line_end":459,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14688,"byte_end":14691,"line_start":487,"line_end":487,"column_start":12,"column_end":15},"name":"set","qualname":"<BitVec<B>>::set","value":"fn (&mut self, i: usize, x: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of a bit at an index `i`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14667,"byte_end":14676,"line_start":486,"line_end":486,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15396,"byte_end":15403,"line_start":512,"line_end":512,"column_start":12,"column_end":19},"name":"set_all","qualname":"<BitVec<B>>::set_all","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets all bits to 1.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15375,"byte_end":15384,"line_start":511,"line_end":511,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15857,"byte_end":15863,"line_start":532,"line_end":532,"column_start":12,"column_end":18},"name":"negate","qualname":"<BitVec<B>>::negate","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Flips all bits.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15836,"byte_end":15845,"line_start":531,"line_end":531,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16697,"byte_end":16702,"line_start":563,"line_end":563,"column_start":12,"column_end":17},"name":"union","qualname":"<BitVec<B>>::union","value":"fn (&mut self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Calculates the union of two bitvectors. This acts like the bitwise `or`\n function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16676,"byte_end":16685,"line_start":562,"line_end":562,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17545,"byte_end":17554,"line_start":593,"line_end":593,"column_start":12,"column_end":21},"name":"intersect","qualname":"<BitVec<B>>::intersect","value":"fn (&mut self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Calculates the intersection of two bitvectors. This acts like the\n bitwise `and` function.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17524,"byte_end":17533,"line_start":592,"line_end":592,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18665,"byte_end":18675,"line_start":630,"line_end":630,"column_start":12,"column_end":22},"name":"difference","qualname":"<BitVec<B>>::difference","value":"fn (&mut self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Calculates the difference between two bitvectors.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18644,"byte_end":18653,"line_start":629,"line_end":629,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19086,"byte_end":19089,"line_start":648,"line_end":648,"column_start":12,"column_end":15},"name":"all","qualname":"<BitVec<B>>::all","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all bits are 1.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19065,"byte_end":19074,"line_start":647,"line_end":647,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19766,"byte_end":19770,"line_start":670,"line_end":670,"column_start":12,"column_end":16},"name":"iter","qualname":"<BitVec<B>>::iter","value":"fn (&self) -> Iter<B>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the elements of the vector in order.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19745,"byte_end":19754,"line_start":669,"line_end":669,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23130,"byte_end":23134,"line_start":793,"line_end":793,"column_start":12,"column_end":16},"name":"none","qualname":"<BitVec<B>>::none","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all bits are 0.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23109,"byte_end":23118,"line_start":792,"line_end":792,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23523,"byte_end":23526,"line_start":811,"line_end":811,"column_start":12,"column_end":15},"name":"any","qualname":"<BitVec<B>>::any","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any bit is 1.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23502,"byte_end":23511,"line_start":810,"line_end":810,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24243,"byte_end":24251,"line_start":836,"line_end":836,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<BitVec<B>>::to_bytes","value":"fn (&self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Organises the bits into bytes, such that the first bit in the\n `BitVec` becomes the high-order bit of the first byte. If the\n size of the `BitVec` is not a multiple of eight then trailing bits\n will be filled-in with `false`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25501,"byte_end":25507,"line_start":879,"line_end":879,"column_start":12,"column_end":18},"name":"eq_vec","qualname":"<BitVec<B>>::eq_vec","value":"fn (&self, v: &[bool]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compares a `BitVec` to a slice of `bool`s.\n Both the `BitVec` and slice must have the same length.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25480,"byte_end":25489,"line_start":878,"line_end":878,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26051,"byte_end":26059,"line_start":899,"line_end":899,"column_start":12,"column_end":20},"name":"truncate","qualname":"<BitVec<B>>::truncate","value":"fn (&mut self, len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shortens a `BitVec`, dropping excess elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26030,"byte_end":26039,"line_start":898,"line_end":898,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26822,"byte_end":26829,"line_start":926,"line_end":926,"column_start":12,"column_end":19},"name":"reserve","qualname":"<BitVec<B>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more bits to be inserted in the given\n `BitVec`. The collection may reserve more space to avoid frequent reallocations.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26801,"byte_end":26810,"line_start":925,"line_end":925,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27893,"byte_end":27906,"line_start":956,"line_end":956,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<BitVec<B>>::reserve_exact","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\n given `BitVec`. Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27872,"byte_end":27881,"line_start":955,"line_end":955,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28582,"byte_end":28590,"line_start":977,"line_end":977,"column_start":12,"column_end":20},"name":"capacity","qualname":"<BitVec<B>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity in bits for this bit vector. Inserting any\n element less than this amount will not trigger a resizing.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28561,"byte_end":28570,"line_start":976,"line_end":976,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29144,"byte_end":29148,"line_start":997,"line_end":997,"column_start":12,"column_end":16},"name":"grow","qualname":"<BitVec<B>>::grow","value":"fn (&mut self, n: usize, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31093,"byte_end":31096,"line_start":1049,"line_end":1049,"column_start":12,"column_end":15},"name":"pop","qualname":"<BitVec<B>>::pop","value":"fn (&mut self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31072,"byte_end":31081,"line_start":1048,"line_end":1048,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31778,"byte_end":31782,"line_start":1079,"line_end":1079,"column_start":12,"column_end":16},"name":"push","qualname":"<BitVec<B>>::push","value":"fn (&mut self, elem: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Pushes a `bool` onto the end.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31757,"byte_end":31766,"line_start":1078,"line_end":1078,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32138,"byte_end":32141,"line_start":1090,"line_end":1090,"column_start":12,"column_end":15},"name":"len","qualname":"<BitVec<B>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of bits in this vector\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32117,"byte_end":32126,"line_start":1089,"line_end":1089,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32365,"byte_end":32372,"line_start":1096,"line_end":1096,"column_start":19,"column_end":26},"name":"set_len","qualname":"<BitVec<B>>::set_len","value":"fn (&mut self, len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of bits that this BitVec considers initialized.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32337,"byte_end":32346,"line_start":1095,"line_end":1095,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32510,"byte_end":32518,"line_start":1102,"line_end":1102,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BitVec<B>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if there are no bits in this vector\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32489,"byte_end":32498,"line_start":1101,"line_end":1101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32620,"byte_end":32625,"line_start":1106,"line_end":1106,"column_start":12,"column_end":17},"name":"clear","qualname":"<BitVec<B>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears all bits in this vector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32599,"byte_end":32608,"line_start":1105,"line_end":1105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32989,"byte_end":33002,"line_start":1116,"line_end":1116,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<BitVec<B>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the underlying storage as much as\n possible.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":322},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35620,"byte_end":35624,"line_start":1219,"line_end":1219,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":147}],"decl_id":null,"docs":" An iterator for `BitVec`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":226},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36640,"byte_end":36648,"line_start":1260,"line_end":1260,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":115}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":328},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37481,"byte_end":37487,"line_start":1296,"line_end":1296,"column_start":12,"column_end":18},"name":"Blocks","qualname":"::Blocks","value":"Blocks {  }","parent":null,"children":[{"krate":0,"index":157}],"decl_id":null,"docs":" An iterator over the blocks of a `BitVec`.\n","sig":null,"attributes":[]}],"impls":[{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6607,"byte_end":6613,"line_start":222,"line_end":222,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7927,"byte_end":7933,"line_start":260,"line_end":260,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11618,"byte_end":11624,"line_start":382,"line_end":382,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33093,"byte_end":33099,"line_start":1121,"line_end":1121,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33233,"byte_end":33239,"line_start":1126,"line_end":1126,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33453,"byte_end":33459,"line_start":1135,"line_end":1135,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33776,"byte_end":33782,"line_start":1147,"line_end":1147,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34094,"byte_end":34100,"line_start":1160,"line_end":1160,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34247,"byte_end":34253,"line_start":1167,"line_end":1167,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34839,"byte_end":34845,"line_start":1186,"line_end":1186,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35067,"byte_end":35073,"line_start":1195,"line_end":1195,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35300,"byte_end":35306,"line_start":1205,"line_end":1205,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35548,"byte_end":35554,"line_start":1215,"line_end":1215,"column_start":31,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35735,"byte_end":35739,"line_start":1224,"line_end":1224,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36221,"byte_end":36225,"line_start":1239,"line_end":1239,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36417,"byte_end":36421,"line_start":1246,"line_end":1246,"column_start":45,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36741,"byte_end":36749,"line_start":1265,"line_end":1265,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36948,"byte_end":36956,"line_start":1274,"line_end":1274,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37140,"byte_end":37148,"line_start":1281,"line_end":1281,"column_start":41,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37191,"byte_end":37197,"line_start":1283,"line_end":1283,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37569,"byte_end":37575,"line_start":1300,"line_end":1300,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37849,"byte_end":37855,"line_start":1314,"line_end":1314,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38014,"byte_end":38020,"line_start":1321,"line_end":1321,"column_start":45,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4088,"byte_end":4092,"line_start":121,"line_end":121,"column_start":2,"column_end":6},"kind":"SuperTrait","from":{"krate":1,"index":1682},"to":{"krate":0,"index":50}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4096,"byte_end":4099,"line_start":122,"line_end":122,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":1,"index":1740},"to":{"krate":0,"index":50}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4122,"byte_end":4125,"line_start":123,"line_end":123,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":1,"index":1748},"to":{"krate":0,"index":50}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4148,"byte_end":4151,"line_start":124,"line_end":124,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":1,"index":1860},"to":{"krate":0,"index":50}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4175,"byte_end":4178,"line_start":125,"line_end":125,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":1,"index":1870},"to":{"krate":0,"index":50}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4202,"byte_end":4205,"line_start":126,"line_end":126,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":1,"index":1828},"to":{"krate":0,"index":50}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4222,"byte_end":4228,"line_start":127,"line_end":127,"column_start":2,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":1836},"to":{"krate":0,"index":50}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4251,"byte_end":4256,"line_start":128,"line_end":128,"column_start":2,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":1844},"to":{"krate":0,"index":50}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4279,"byte_end":4285,"line_start":129,"line_end":129,"column_start":2,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":1852},"to":{"krate":0,"index":50}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4308,"byte_end":4311,"line_start":130,"line_end":130,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":1,"index":1774},"to":{"krate":0,"index":50}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4334,"byte_end":4336,"line_start":131,"line_end":131,"column_start":2,"column_end":4},"kind":"SuperTrait","from":{"krate":1,"index":2368},"to":{"krate":0,"index":50}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4340,"byte_end":4343,"line_start":132,"line_end":132,"column_start":2,"column_end":5},"kind":"SuperTrait","from":{"krate":1,"index":2398},"to":{"krate":0,"index":50}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4353,"byte_end":4357,"line_start":133,"line_end":133,"column_start":8,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":7630},"to":{"krate":0,"index":50}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6607,"byte_end":6613,"line_start":222,"line_end":222,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":72},"to":{"krate":1,"index":2010}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7927,"byte_end":7933,"line_start":260,"line_end":260,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":72},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11618,"byte_end":11624,"line_start":382,"line_end":382,"column_start":19,"column_end":25},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":72},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33093,"byte_end":33099,"line_start":1121,"line_end":1121,"column_start":31,"column_end":37},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":72},"to":{"krate":1,"index":2584}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33233,"byte_end":33239,"line_start":1126,"line_end":1126,"column_start":42,"column_end":48},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":72},"to":{"krate":1,"index":4272}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33453,"byte_end":33459,"line_start":1135,"line_end":1135,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":72},"to":{"krate":1,"index":4292}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33776,"byte_end":33782,"line_start":1147,"line_end":1147,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":72},"to":{"krate":1,"index":2550}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34094,"byte_end":34100,"line_start":1160,"line_end":1160,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":72},"to":{"krate":1,"index":2416}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34247,"byte_end":34253,"line_start":1167,"line_end":1167,"column_start":27,"column_end":33},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":72},"to":{"krate":1,"index":2398}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34839,"byte_end":34845,"line_start":1186,"line_end":1186,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":72},"to":{"krate":1,"index":8064}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35067,"byte_end":35073,"line_start":1195,"line_end":1195,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":72},"to":{"krate":1,"index":7630}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35300,"byte_end":35306,"line_start":1205,"line_end":1205,"column_start":38,"column_end":44},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":72},"to":{"krate":1,"index":2362}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35548,"byte_end":35554,"line_start":1215,"line_end":1215,"column_start":31,"column_end":37},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":72},"to":{"krate":1,"index":2368}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35735,"byte_end":35739,"line_start":1224,"line_end":1224,"column_start":36,"column_end":40},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":322},"to":{"krate":1,"index":3888}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36221,"byte_end":36225,"line_start":1239,"line_end":1239,"column_start":47,"column_end":51},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":322},"to":{"krate":1,"index":4300}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36417,"byte_end":36421,"line_start":1246,"line_end":1246,"column_start":45,"column_end":49},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":322},"to":{"krate":1,"index":4314}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36741,"byte_end":36749,"line_start":1265,"line_end":1265,"column_start":32,"column_end":40},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":226},"to":{"krate":1,"index":3888}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36948,"byte_end":36956,"line_start":1274,"line_end":1274,"column_start":43,"column_end":51},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":226},"to":{"krate":1,"index":4300}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37140,"byte_end":37148,"line_start":1281,"line_end":1281,"column_start":41,"column_end":49},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":226},"to":{"krate":1,"index":4314}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37191,"byte_end":37197,"line_start":1283,"line_end":1283,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":72},"to":{"krate":1,"index":4276}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37569,"byte_end":37575,"line_start":1300,"line_end":1300,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":328},"to":{"krate":1,"index":3888}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37849,"byte_end":37855,"line_start":1314,"line_end":1314,"column_start":47,"column_end":53},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":328},"to":{"krate":1,"index":4300}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,116,45,118,101,99,45,48,46,53,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38014,"byte_end":38020,"line_start":1321,"line_end":1321,"column_start":45,"column_end":51},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":328},"to":{"krate":1,"index":4314}}]}