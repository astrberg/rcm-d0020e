{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54],"program":"/home/aron/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","flate2","/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"miniz-sys\"","-C","metadata=72814aad80d3239b","-C","extra-filename=-72814aad80d3239b","--out-dir","/home/aron/rust/xml_to_mysql/target/rls/debug/deps","-L","dependency=/home/aron/rust/xml_to_mysql/target/rls/debug/deps","--extern","crc32fast=/home/aron/rust/xml_to_mysql/target/rls/debug/deps/libcrc32fast-bacf2b3b746934a4.rmeta","--extern","libc=/home/aron/rust/xml_to_mysql/target/rls/debug/deps/liblibc-b033987fb12a4697.rmeta","--extern","miniz_sys=/home/aron/rust/xml_to_mysql/target/rls/debug/deps/libminiz_sys-e3314354973ef1f3.rmeta","--cap-lints","allow","-L","native=/home/aron/rust/xml_to_mysql/target/rls/debug/build/miniz-sys-a90985f954d8803c/out","--error-format=json","--sysroot","/home/aron/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,97,114,111,110,47,114,117,115,116,47,120,109,108,95,116,111,95,109,121,115,113,108,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,102,108,97,116,101,50,45,55,50,56,49,52,97,97,100,56,48,100,51,50,51,57,98,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"flate2","disambiguator":[16678736272047175795,813681261857459141]},"crate_root":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src","external_crates":[{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[13653490757311001470,18210972786764511751]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10798836723055308036,13313936280221541629]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4173213016744015638,3014784451015659406]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[11944383677982007713,15257420578295466644]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/lib.rs","num":5,"id":{"name":"libc","disambiguator":[4959566726620691501,6146722101769139636]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/lib.rs","num":6,"id":{"name":"unwind","disambiguator":[11525715658488109252,1561200000967009509]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/lib.rs","num":7,"id":{"name":"panic_unwind","disambiguator":[14286758744204974931,8495317743760309751]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/lib.rs","num":8,"id":{"name":"crc32fast","disambiguator":[1467815409411564497,15634167669388495585]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/lib.rs","num":9,"id":{"name":"cfg_if","disambiguator":[7763573116459283150,10356585151666294548]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/lib.rs","num":10,"id":{"name":"libc","disambiguator":[2114940872754216120,16832356387425244416]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/ffi.rs","num":11,"id":{"name":"miniz_sys","disambiguator":[3991023299354087773,17116156888522109695]}}],"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":7821,"line_start":1,"line_end":235,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1394},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4071,"byte_end":4080,"line_start":111,"line_end":111,"column_start":13,"column_end":22},"alias_span":null,"name":"GzBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1378},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4094,"byte_end":4102,"line_start":112,"line_end":112,"column_start":13,"column_end":21},"alias_span":null,"name":"GzHeader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1406},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4118,"byte_end":4126,"line_start":113,"line_end":113,"column_start":15,"column_end":23},"alias_span":null,"name":"Compress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1492},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4128,"byte_end":4141,"line_start":113,"line_end":113,"column_start":25,"column_end":38},"alias_span":null,"name":"CompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1412},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4143,"byte_end":4153,"line_start":113,"line_end":113,"column_start":40,"column_end":50},"alias_span":null,"name":"Decompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1486},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4155,"byte_end":4170,"line_start":113,"line_end":113,"column_start":52,"column_end":67},"alias_span":null,"name":"DecompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1498},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4172,"byte_end":4178,"line_start":113,"line_end":113,"column_start":69,"column_end":75},"alias_span":null,"name":"Status","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1436},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4195,"byte_end":4208,"line_start":114,"line_end":114,"column_start":15,"column_end":28},"alias_span":null,"name":"FlushCompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1456},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4210,"byte_end":4225,"line_start":114,"line_end":114,"column_start":30,"column_end":45},"alias_span":null,"name":"FlushDecompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1276},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4242,"byte_end":4245,"line_start":115,"line_end":115,"column_start":15,"column_end":18},"alias_span":null,"name":"Crc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1282},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4247,"byte_end":4256,"line_start":115,"line_end":115,"column_start":20,"column_end":29},"alias_span":null,"name":"CrcReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1288},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4258,"byte_end":4267,"line_start":115,"line_end":115,"column_start":31,"column_end":40},"alias_span":null,"name":"CrcWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1306},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4562,"byte_end":4576,"line_start":131,"line_end":131,"column_start":28,"column_end":42},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":1210}},{"kind":"Use","ref_id":{"krate":0,"index":1312},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4605,"byte_end":4619,"line_start":132,"line_end":132,"column_start":28,"column_end":42},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":1210}},{"kind":"Use","ref_id":{"krate":0,"index":1530},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4645,"byte_end":4656,"line_start":133,"line_end":133,"column_start":25,"column_end":36},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":1210}},{"kind":"Use","ref_id":{"krate":0,"index":1536},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4682,"byte_end":4693,"line_start":134,"line_end":134,"column_start":25,"column_end":36},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":1210}},{"kind":"Use","ref_id":{"krate":0,"index":1348},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4717,"byte_end":4726,"line_start":135,"line_end":135,"column_start":23,"column_end":32},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":1210}},{"kind":"Use","ref_id":{"krate":0,"index":1354},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4750,"byte_end":4759,"line_start":136,"line_end":136,"column_start":23,"column_end":32},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":1210}},{"kind":"Use","ref_id":{"krate":0,"index":1360},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4783,"byte_end":4797,"line_start":137,"line_end":137,"column_start":23,"column_end":37},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":1210}},{"kind":"Use","ref_id":{"krate":0,"index":1318},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5015,"byte_end":5029,"line_start":145,"line_end":145,"column_start":29,"column_end":43},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":1226}},{"kind":"Use","ref_id":{"krate":0,"index":1324},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5059,"byte_end":5073,"line_start":146,"line_end":146,"column_start":29,"column_end":43},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":1226}},{"kind":"Use","ref_id":{"krate":0,"index":1542},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5100,"byte_end":5111,"line_start":147,"line_end":147,"column_start":26,"column_end":37},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":1226}},{"kind":"Use","ref_id":{"krate":0,"index":1548},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5138,"byte_end":5149,"line_start":148,"line_end":148,"column_start":26,"column_end":37},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":1226}},{"kind":"Use","ref_id":{"krate":0,"index":1366},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5174,"byte_end":5183,"line_start":149,"line_end":149,"column_start":24,"column_end":33},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":1226}},{"kind":"Use","ref_id":{"krate":0,"index":1372},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5208,"byte_end":5217,"line_start":150,"line_end":150,"column_start":24,"column_end":33},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":1226}},{"kind":"Use","ref_id":{"krate":0,"index":1294},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5445,"byte_end":5459,"line_start":158,"line_end":158,"column_start":31,"column_end":45},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":1240}},{"kind":"Use","ref_id":{"krate":0,"index":1300},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5491,"byte_end":5505,"line_start":159,"line_end":159,"column_start":31,"column_end":45},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":1240}},{"kind":"Use","ref_id":{"krate":0,"index":1518},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5534,"byte_end":5545,"line_start":160,"line_end":160,"column_start":28,"column_end":39},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":1240}},{"kind":"Use","ref_id":{"krate":0,"index":1524},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5574,"byte_end":5585,"line_start":161,"line_end":161,"column_start":28,"column_end":39},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":1240}},{"kind":"Use","ref_id":{"krate":0,"index":1330},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5612,"byte_end":5621,"line_start":162,"line_end":162,"column_start":26,"column_end":35},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":1240}},{"kind":"Use","ref_id":{"krate":0,"index":1336},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5648,"byte_end":5657,"line_start":163,"line_end":163,"column_start":26,"column_end":35},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":1240}},{"kind":"Use","ref_id":{"krate":0,"index":1342},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5684,"byte_end":5698,"line_start":164,"line_end":164,"column_start":26,"column_end":40},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":1240}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":7821,"line_start":1,"line_end":235,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":26},{"krate":0,"index":32},{"krate":0,"index":40},{"krate":0,"index":82},{"krate":0,"index":152},{"krate":0,"index":372},{"krate":0,"index":410},{"krate":0,"index":778},{"krate":0,"index":892},{"krate":0,"index":992},{"krate":0,"index":1210},{"krate":0,"index":1226},{"krate":0,"index":1240},{"krate":0,"index":1256},{"krate":0,"index":1554},{"krate":0,"index":1574},{"krate":0,"index":1570},{"krate":0,"index":1564},{"krate":0,"index":1560},{"krate":0,"index":1556},{"krate":0,"index":1260},{"krate":0,"index":1272}],"decl_id":null,"docs":" A DEFLATE-based stream compression/decompression library","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3054,"byte_end":3076,"line_start":77,"line_end":77,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3077,"byte_end":3116,"line_start":78,"line_end":78,"column_start":1,"column_end":40}},{"value":"allow(trivial_numeric_casts)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3117,"byte_end":3149,"line_start":79,"line_end":79,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1276},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":10840,"byte_end":10843,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"Crc","qualname":"::crc::Crc","value":"Crc {  }","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":291}],"decl_id":null,"docs":" The CRC calculated by a [`CrcReader`].","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1282},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11035,"byte_end":11044,"line_start":21,"line_end":21,"column_start":12,"column_end":21},"name":"CrcReader","qualname":"::crc::CrcReader","value":"CrcReader {  }","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":297}],"decl_id":null,"docs":" A wrapper around a [`Read`] that calculates the CRC.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11129,"byte_end":11132,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<Crc>::new","value":"fn () -> Crc","parent":null,"children":[],"decl_id":null,"docs":" Create a new CRC.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11252,"byte_end":11255,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"sum","qualname":"<Crc>::sum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the current crc32 checksum.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11479,"byte_end":11485,"line_start":39,"line_end":39,"column_start":12,"column_end":18},"name":"amount","qualname":"<Crc>::amount","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The number of bytes that have been used to calculate the CRC.\n This value is only accurate if the amount is lower than 2<sup>32</sup>.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11586,"byte_end":11592,"line_start":44,"line_end":44,"column_start":12,"column_end":18},"name":"update","qualname":"<Crc>::update","value":"fn (&mut self, data: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Update the CRC with the bytes in `data`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11755,"byte_end":11760,"line_start":50,"line_end":50,"column_start":12,"column_end":17},"name":"reset","qualname":"<Crc>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the CRC.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11915,"byte_end":11922,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"combine","qualname":"<Crc>::combine","value":"fn (&mut self, additional_crc: &Crc) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Combine the CRC with the CRC for the subsequent block of bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12132,"byte_end":12135,"line_start":64,"line_end":64,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcReader<R>>::new","value":"fn (r: R) -> CrcReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12324,"byte_end":12327,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcReader<R>>::crc","value":"fn (&self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12439,"byte_end":12449,"line_start":79,"line_end":79,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcReader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12571,"byte_end":12578,"line_start":84,"line_end":84,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcReader<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader by reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12713,"byte_end":12720,"line_start":89,"line_end":89,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcReader<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12827,"byte_end":12832,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcReader<R>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1288},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13558,"byte_end":13567,"line_start":123,"line_end":123,"column_start":12,"column_end":21},"name":"CrcWriter","qualname":"::crc::CrcWriter","value":"CrcWriter {  }","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":305}],"decl_id":null,"docs":" A wrapper around a [`Write`] that calculates the CRC.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13678,"byte_end":13681,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcWriter<W>>::crc","value":"fn (&self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13793,"byte_end":13803,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcWriter<W>>::into_inner","value":"fn (self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Get the writer that is wrapped by this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13925,"byte_end":13932,"line_start":140,"line_end":140,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcWriter<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Get the writer that is wrapped by this CrcWriter by reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14067,"byte_end":14074,"line_start":145,"line_end":145,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcWriter<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the writer that is wrapped by this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14181,"byte_end":14186,"line_start":150,"line_end":150,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcWriter<W>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14308,"byte_end":14311,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcWriter<W>>::new","value":"fn (w: W) -> CrcWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcWriter.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1294},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22054,"byte_end":22068,"line_start":45,"line_end":45,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::bufread::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":313}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22283,"byte_end":22286,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22947,"byte_end":22952,"line_start":73,"line_end":73,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23122,"byte_end":23129,"line_start":79,"line_end":79,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23374,"byte_end":23381,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23509,"byte_end":23519,"line_start":92,"line_end":92,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23790,"byte_end":23798,"line_start":100,"line_end":100,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24032,"byte_end":24041,"line_start":108,"line_end":108,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1300},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":25866,"byte_end":25880,"line_start":171,"line_end":171,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::bufread::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":321}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26168,"byte_end":26171,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"fn (r: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26711,"byte_end":26716,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27003,"byte_end":27013,"line_start":208,"line_end":208,"column_start":12,"column_end":22},"name":"reset_data","qualname":"<DeflateDecoder<R>>::reset_data","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder's data","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27133,"byte_end":27140,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27385,"byte_end":27392,"line_start":221,"line_end":221,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27520,"byte_end":27530,"line_start":226,"line_end":226,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27799,"byte_end":27807,"line_start":234,"line_end":234,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27943,"byte_end":27952,"line_start":239,"line_end":239,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1306},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":29821,"byte_end":29835,"line_start":41,"line_end":41,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::read::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":327}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30065,"byte_end":30068,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30800,"byte_end":30805,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":31001,"byte_end":31008,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":31274,"byte_end":31281,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":31622,"byte_end":31632,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":31931,"byte_end":31939,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32174,"byte_end":32183,"line_start":105,"line_end":105,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1312},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":33958,"byte_end":33972,"line_start":168,"line_end":168,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::read::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":333}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34169,"byte_end":34172,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"fn (r: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34490,"byte_end":34502,"line_start":183,"line_end":183,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<DeflateDecoder<R>>::new_with_buf","value":"fn (r: R, buf: Vec<u8>) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":35222,"byte_end":35227,"line_start":201,"line_end":201,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":35423,"byte_end":35430,"line_start":207,"line_end":207,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":35696,"byte_end":35703,"line_start":215,"line_end":215,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36044,"byte_end":36054,"line_start":224,"line_end":224,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36351,"byte_end":36359,"line_start":232,"line_end":232,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36496,"byte_end":36505,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1318},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38094,"byte_end":38108,"line_start":35,"line_end":35,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::write::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":339}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38438,"byte_end":38441,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<W>>::new","value":"fn (w: W, level: ::Compression) -> DeflateEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38670,"byte_end":38677,"line_start":52,"line_end":52,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38954,"byte_end":38961,"line_start":60,"line_end":60,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":39839,"byte_end":39844,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":40604,"byte_end":40614,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":41449,"byte_end":41455,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42140,"byte_end":42152,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<DeflateEncoder<W>>::flush_finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42478,"byte_end":42486,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42729,"byte_end":42738,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1324},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":44678,"byte_end":44692,"line_start":220,"line_end":220,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::write::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":345}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":44981,"byte_end":44984,"line_start":229,"line_end":229,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<W>>::new","value":"fn (w: W) -> DeflateDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":45186,"byte_end":45193,"line_start":236,"line_end":236,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":45470,"byte_end":45477,"line_start":244,"line_end":244,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":46258,"byte_end":46263,"line_start":263,"line_end":263,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":47004,"byte_end":47014,"line_start":284,"line_end":284,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":47828,"byte_end":47834,"line_start":303,"line_end":303,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48196,"byte_end":48204,"line_start":313,"line_end":313,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48374,"byte_end":48383,"line_start":319,"line_end":319,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1330},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":68845,"byte_end":68854,"line_start":146,"line_end":146,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::bufread::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":353},{"krate":0,"index":355},{"krate":0,"index":357}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":69622,"byte_end":69625,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"fn (r: R, level: Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70380,"byte_end":70387,"line_start":196,"line_end":196,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70654,"byte_end":70661,"line_start":204,"line_end":204,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70804,"byte_end":70814,"line_start":209,"line_end":209,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1336},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":72834,"byte_end":72843,"line_start":282,"line_end":282,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::bufread::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":365},{"krate":0,"index":367}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":73114,"byte_end":73117,"line_start":291,"line_end":291,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"fn (mut r: R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74470,"byte_end":74476,"line_start":339,"line_end":339,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74639,"byte_end":74646,"line_start":344,"line_end":344,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74913,"byte_end":74920,"line_start":352,"line_end":352,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":75065,"byte_end":75075,"line_start":357,"line_end":357,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1342},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":77537,"byte_end":77551,"line_start":436,"line_end":436,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::bufread::MultiGzDecoder","value":"MultiGzDecoder {  }","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":375},{"krate":0,"index":377}],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":77901,"byte_end":77904,"line_start":446,"line_end":446,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"fn (mut r: R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":79760,"byte_end":79766,"line_start":508,"line_end":508,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":79904,"byte_end":79911,"line_start":513,"line_end":513,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":80178,"byte_end":80185,"line_start":521,"line_end":521,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":80330,"byte_end":80340,"line_start":526,"line_end":526,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1348},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":82145,"byte_end":82154,"line_start":36,"line_end":36,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::read::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":383}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":82702,"byte_end":82705,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"fn (r: R, level: Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":82888,"byte_end":82895,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":83162,"byte_end":83169,"line_start":67,"line_end":67,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":83312,"byte_end":83322,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1354},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":84787,"byte_end":84796,"line_start":128,"line_end":128,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::read::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":389}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":84988,"byte_end":84991,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"fn (r: R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85225,"byte_end":85231,"line_start":144,"line_end":144,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85363,"byte_end":85370,"line_start":149,"line_end":149,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85637,"byte_end":85644,"line_start":157,"line_end":157,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85789,"byte_end":85799,"line_start":162,"line_end":162,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1360},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":87766,"byte_end":87780,"line_start":224,"line_end":224,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::read::MultiGzDecoder","value":"MultiGzDecoder {  }","parent":null,"children":[{"krate":0,"index":395}],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88064,"byte_end":88067,"line_start":232,"line_end":232,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"fn (r: R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88327,"byte_end":88333,"line_start":241,"line_end":241,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88465,"byte_end":88472,"line_start":246,"line_end":246,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88739,"byte_end":88746,"line_start":254,"line_end":254,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88891,"byte_end":88901,"line_start":259,"line_end":259,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1366},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":90322,"byte_end":90331,"line_start":39,"line_end":39,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::write::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":407}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":91078,"byte_end":91081,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<W>>::new","value":"fn (w: W, level: Compression) -> GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":91240,"byte_end":91247,"line_start":68,"line_end":68,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":91504,"byte_end":91511,"line_start":76,"line_end":76,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":92190,"byte_end":92200,"line_start":95,"line_end":95,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":93573,"byte_end":93579,"line_start":131,"line_end":131,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Finish encoding this stream, returning the underlying writer once the\n encoding is done.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1372},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":96051,"byte_end":96060,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::write::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":417},{"krate":0,"index":419}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":96467,"byte_end":96470,"line_start":233,"line_end":233,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<W>>::new","value":"fn (w: W) -> GzDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":96799,"byte_end":96805,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<W>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":96938,"byte_end":96945,"line_start":248,"line_end":248,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":97232,"byte_end":97239,"line_start":256,"line_end":256,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":97892,"byte_end":97902,"line_start":275,"line_end":275,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":98741,"byte_end":98747,"line_start":295,"line_end":295,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1378},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":54149,"byte_end":54157,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"GzHeader","qualname":"::gz::GzHeader","value":"GzHeader {  }","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":425},{"krate":0,"index":427},{"krate":0,"index":429},{"krate":0,"index":431}],"decl_id":null,"docs":" A structure representing the header of a gzip stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":54400,"byte_end":54408,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzHeader>::filename","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `filename` field of this gzip stream's header, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":54576,"byte_end":54581,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzHeader>::extra","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `extra` field of this gzip stream's header, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":54748,"byte_end":54755,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzHeader>::comment","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `comment` field of this gzip stream's header, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":55041,"byte_end":55057,"line_start":50,"line_end":50,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzHeader>::operating_system","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the `operating_system` field of this gzip stream's header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":55679,"byte_end":55684,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzHeader>::mtime","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" This gives the most recent modification time of the original file being compressed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":56079,"byte_end":56096,"line_start":74,"line_end":74,"column_start":12,"column_end":29},"name":"mtime_as_datetime","qualname":"<GzHeader>::mtime_as_datetime","value":"fn (&self) -> Option<time::SystemTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns the most recent modification time represented by a date-time type.\n Returns `None` if the value of the underlying counter is 0,\n indicating no time stamp is available.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1394},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57169,"byte_end":57178,"line_start":112,"line_end":112,"column_start":12,"column_end":21},"name":"GzBuilder","qualname":"::gz::GzBuilder","value":"GzBuilder {  }","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":441}],"decl_id":null,"docs":" A builder structure to create a new gzip Encoder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57413,"byte_end":57416,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<GzBuilder>::new","value":"fn () -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new blank builder with no header by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57676,"byte_end":57681,"line_start":133,"line_end":133,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzBuilder>::mtime","value":"fn (mut self, mtime: u32) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `mtime` field in the gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57845,"byte_end":57861,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzBuilder>::operating_system","value":"fn (mut self, os: u8) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `operating_system` field in the gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":58024,"byte_end":58029,"line_start":145,"line_end":145,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzBuilder>::extra","value":"fn <T> (mut self, extra: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `extra` field in the gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":58303,"byte_end":58311,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzBuilder>::filename","value":"fn <T> (mut self, filename: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `filename` field in the gzip header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":58615,"byte_end":58622,"line_start":165,"line_end":165,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzBuilder>::comment","value":"fn <T> (mut self, comment: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `comment` field in the gzip header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":58985,"byte_end":58990,"line_start":174,"line_end":174,"column_start":12,"column_end":17},"name":"write","qualname":"<GzBuilder>::write","value":"fn <W> (self, w: W, lvl: Compression) -> write::GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a writer encoder in the process.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":59334,"byte_end":59338,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"read","qualname":"<GzBuilder>::read","value":"fn <R> (self, r: R, lvl: Compression) -> read::GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":59687,"byte_end":59695,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"buf_read","qualname":"<GzBuilder>::buf_read","value":"fn <R> (self, r: R, lvl: Compression) -> bufread::GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":802},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,105,111,46,114,115],"byte_start":105341,"byte_end":105346,"line_start":15,"line_end":15,"column_start":10,"column_end":15},"name":"Flush","qualname":"::zio::Ops::Flush","value":"type Flush: Flush;","parent":{"krate":0,"index":800},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1406},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":113831,"byte_end":113839,"line_start":25,"line_end":25,"column_start":12,"column_end":20},"name":"Compress","qualname":"::mem::Compress","value":"Compress {  }","parent":null,"children":[{"krate":0,"index":457}],"decl_id":null,"docs":" Raw in-memory compression stream for blocks of data.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1412},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":114484,"byte_end":114494,"line_start":42,"line_end":42,"column_start":12,"column_end":22},"name":"Decompress","qualname":"::mem::Decompress","value":"Decompress {  }","parent":null,"children":[{"krate":0,"index":459}],"decl_id":null,"docs":" Raw in-memory decompression stream for blocks of data.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":473},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":115359,"byte_end":115363,"line_start":73,"line_end":73,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushCompress::None","value":"FlushCompress::None","parent":{"krate":0,"index":1436},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":477},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":115814,"byte_end":115818,"line_start":82,"line_end":82,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushCompress::Sync","value":"FlushCompress::Sync","parent":{"krate":0,"index":1436},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":481},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":116351,"byte_end":116358,"line_start":92,"line_end":92,"column_start":5,"column_end":12},"name":"Partial","qualname":"::mem::FlushCompress::Partial","value":"FlushCompress::Partial","parent":{"krate":0,"index":1436},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer, but the output is\n not aligned to a byte boundary.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":485},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":116702,"byte_end":116706,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"Full","qualname":"::mem::FlushCompress::Full","value":"FlushCompress::Full","parent":{"krate":0,"index":1436},"children":[],"decl_id":null,"docs":" All output is flushed as with `Flush::Sync` and the compression state is\n reset so decompression can restart from this point if previous\n compressed data has been damaged or if random access is desired.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":489},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":116934,"byte_end":116940,"line_start":105,"line_end":105,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushCompress::Finish","value":"FlushCompress::Finish","parent":{"krate":0,"index":1436},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":493},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":116992,"byte_end":117006,"line_start":108,"line_end":108,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushCompress::_Nonexhaustive","value":"FlushCompress::_Nonexhaustive","parent":{"krate":0,"index":1436},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1436},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":115105,"byte_end":115118,"line_start":69,"line_end":69,"column_start":10,"column_end":23},"name":"FlushCompress","qualname":"::mem::FlushCompress","value":"FlushCompress::{None, Sync, Partial, Full, Finish, _Nonexhaustive}","parent":null,"children":[{"krate":0,"index":473},{"krate":0,"index":477},{"krate":0,"index":481},{"krate":0,"index":485},{"krate":0,"index":489},{"krate":0,"index":493}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when compressing\n in-memory data.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":115096,"byte_end":117009,"line_start":69,"line_end":109,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":115096,"byte_end":117009,"line_start":69,"line_end":109,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":495},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":117418,"byte_end":117422,"line_start":118,"line_end":118,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushDecompress::None","value":"FlushDecompress::None","parent":{"krate":0,"index":1456},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":499},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":117873,"byte_end":117877,"line_start":127,"line_end":127,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushDecompress::Sync","value":"FlushDecompress::Sync","parent":{"krate":0,"index":1456},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":503},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":118105,"byte_end":118111,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushDecompress::Finish","value":"FlushDecompress::Finish","parent":{"krate":0,"index":1456},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":507},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":118163,"byte_end":118177,"line_start":136,"line_end":136,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushDecompress::_Nonexhaustive","value":"FlushDecompress::_Nonexhaustive","parent":{"krate":0,"index":1456},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1456},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":117162,"byte_end":117177,"line_start":114,"line_end":114,"column_start":10,"column_end":25},"name":"FlushDecompress","qualname":"::mem::FlushDecompress","value":"FlushDecompress::{None, Sync, Finish, _Nonexhaustive}","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":499},{"krate":0,"index":503},{"krate":0,"index":507}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when\n decompressing in-memory data.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":117153,"byte_end":118180,"line_start":114,"line_end":137,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":117153,"byte_end":118180,"line_start":114,"line_end":137,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1486},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":118483,"byte_end":118498,"line_start":148,"line_end":148,"column_start":12,"column_end":27},"name":"DecompressError","qualname":"::mem::DecompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a decompression object finds that the input stream of\n bytes was not a valid input stream of bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":118734,"byte_end":118750,"line_start":155,"line_end":155,"column_start":12,"column_end":28},"name":"needs_dictionary","qualname":"<DecompressError>::needs_dictionary","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether decompression failed due to requiring a dictionary.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1492},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":118946,"byte_end":118959,"line_start":163,"line_end":163,"column_start":12,"column_end":25},"name":"CompressError","qualname":"::mem::CompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a compression object is used incorrectly or otherwise\n generates an error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":519},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":119316,"byte_end":119318,"line_start":173,"line_end":173,"column_start":5,"column_end":7},"name":"Ok","qualname":"::mem::Status::Ok","value":"Status::Ok","parent":{"krate":0,"index":1498},"children":[],"decl_id":null,"docs":" Indicates success.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":521},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":119797,"byte_end":119805,"line_start":184,"line_end":184,"column_start":5,"column_end":13},"name":"BufError","qualname":"::mem::Status::BufError","value":"Status::BufError","parent":{"krate":0,"index":1498},"children":[],"decl_id":null,"docs":" Indicates that forward progress is not possible due to input or output\n buffers being empty.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":523},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":120087,"byte_end":120096,"line_start":191,"line_end":191,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::mem::Status::StreamEnd","value":"Status::StreamEnd","parent":{"krate":0,"index":1498},"children":[],"decl_id":null,"docs":" Indicates that all input has been consumed and all output bytes have\n been written. Decompression/compression should not be called again.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1498},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":119124,"byte_end":119130,"line_start":168,"line_end":168,"column_start":10,"column_end":16},"name":"Status","qualname":"::mem::Status","value":"Status::{Ok, BufError, StreamEnd}","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":523}],"decl_id":null,"docs":" Possible status results of compressing some data or successfully\n decompressing a block of data.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":119115,"byte_end":120099,"line_start":168,"line_end":192,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":119115,"byte_end":120099,"line_start":168,"line_end":192,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":120420,"byte_end":120423,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"new","qualname":"<Compress>::new","value":"fn (level: Compression, zlib_header: bool) -> Compress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for compressing data that it's given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121368,"byte_end":121376,"line_start":229,"line_end":229,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Compress>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this compression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121549,"byte_end":121558,"line_start":235,"line_end":235,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Compress>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this compression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":122415,"byte_end":122420,"line_start":259,"line_end":259,"column_start":12,"column_end":17},"name":"reset","qualname":"<Compress>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Quickly resets this compressor without having to reallocate anything.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":124029,"byte_end":124037,"line_start":297,"line_end":297,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compress>::compress","value":"fn (&mut self, input: &[u8], output: &mut [u8], flush: FlushCompress) -> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":125623,"byte_end":125635,"line_start":333,"line_end":333,"column_start":12,"column_end":24},"name":"compress_vec","qualname":"<Compress>::compress_vec","value":"fn (&mut self, input: &[u8], output: &mut Vec<u8>, flush: FlushCompress) -> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the extra space of the output, consuming\n only as much input as needed and writing as much output as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":126479,"byte_end":126482,"line_start":360,"line_end":360,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompress>::new","value":"fn (zlib_header: bool) -> Decompress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for decompressing data that it's given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":127284,"byte_end":127292,"line_start":385,"line_end":385,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Decompress>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this decompression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":127467,"byte_end":127476,"line_start":391,"line_end":391,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Decompress>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this decompression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":128673,"byte_end":128683,"line_start":417,"line_end":417,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompress>::decompress","value":"fn (&mut self, input: &[u8], output: &mut [u8], flush: FlushDecompress) -> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":130681,"byte_end":130695,"line_start":462,"line_end":462,"column_start":12,"column_end":26},"name":"decompress_vec","qualname":"<Decompress>::decompress_vec","value":"fn (&mut self, input: &[u8], output: &mut Vec<u8>, flush: FlushDecompress) -> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the extra space in the output vector\n specified by `output`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":132436,"byte_end":132441,"line_start":509,"line_end":509,"column_start":12,"column_end":17},"name":"reset","qualname":"<Decompress>::reset","value":"fn (&mut self, zlib_header: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs the equivalent of replacing this decompression state with a\n freshly allocated copy.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1518},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":145769,"byte_end":145780,"line_start":41,"line_end":41,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::bufread::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":529}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":145992,"byte_end":145995,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":146642,"byte_end":146647,"line_start":69,"line_end":69,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":146817,"byte_end":146824,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":147069,"byte_end":147076,"line_start":83,"line_end":83,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":147204,"byte_end":147214,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":147485,"byte_end":147493,"line_start":96,"line_end":96,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":147727,"byte_end":147736,"line_start":104,"line_end":104,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1524},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149528,"byte_end":149539,"line_start":169,"line_end":169,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::bufread::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":537}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149720,"byte_end":149723,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"fn (r: R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":150353,"byte_end":150358,"line_start":197,"line_end":197,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":150528,"byte_end":150535,"line_start":203,"line_end":203,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":150780,"byte_end":150787,"line_start":211,"line_end":211,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":150915,"byte_end":150925,"line_start":216,"line_end":216,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":151194,"byte_end":151202,"line_start":224,"line_end":224,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":151338,"byte_end":151347,"line_start":229,"line_end":229,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1530},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":153087,"byte_end":153098,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::read::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":543}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":153322,"byte_end":153325,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":154045,"byte_end":154050,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":154246,"byte_end":154253,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":154519,"byte_end":154526,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":154867,"byte_end":154877,"line_start":86,"line_end":86,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":155176,"byte_end":155184,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":155419,"byte_end":155428,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1536},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":157161,"byte_end":157172,"line_start":167,"line_end":167,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::read::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":549}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":157363,"byte_end":157366,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"fn (r: R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":157693,"byte_end":157705,"line_start":182,"line_end":182,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<ZlibDecoder<R>>::new_with_buf","value":"fn (r: R, buf: Vec<u8>) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158413,"byte_end":158418,"line_start":200,"line_end":200,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158614,"byte_end":158621,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":158887,"byte_end":158894,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":159235,"byte_end":159245,"line_start":223,"line_end":223,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":159542,"byte_end":159550,"line_start":231,"line_end":231,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":159687,"byte_end":159696,"line_start":236,"line_end":236,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1542},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":161294,"byte_end":161305,"line_start":36,"line_end":36,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::write::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":555}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":161632,"byte_end":161635,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<W>>::new","value":"fn (w: W, level: ::Compression) -> ZlibEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":161857,"byte_end":161864,"line_start":53,"line_end":53,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":162141,"byte_end":162148,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":162963,"byte_end":162968,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":163728,"byte_end":163738,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":164573,"byte_end":164579,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":165264,"byte_end":165276,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<ZlibEncoder<W>>::flush_finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":165602,"byte_end":165610,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":165853,"byte_end":165862,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1548},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":167748,"byte_end":167759,"line_start":222,"line_end":222,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::write::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":561}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":168045,"byte_end":168048,"line_start":231,"line_end":231,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<W>>::new","value":"fn (w: W) -> ZlibDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":168243,"byte_end":168250,"line_start":238,"line_end":238,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":168527,"byte_end":168534,"line_start":246,"line_end":246,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":169148,"byte_end":169153,"line_start":262,"line_end":262,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":169929,"byte_end":169939,"line_start":283,"line_end":283,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":170753,"byte_end":170759,"line_start":302,"line_end":302,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171121,"byte_end":171129,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171299,"byte_end":171308,"line_start":318,"line_end":318,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1210},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4528,"byte_end":4532,"line_start":130,"line_end":130,"column_start":9,"column_end":13},"name":"read","qualname":"::read","value":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1216},{"krate":0,"index":1218},{"krate":0,"index":1220},{"krate":0,"index":1222},{"krate":0,"index":1224}],"decl_id":null,"docs":" Types which operate over [`Read`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1226},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4979,"byte_end":4984,"line_start":144,"line_end":144,"column_start":9,"column_end":14},"name":"write","qualname":"::write","value":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1228},{"krate":0,"index":1230},{"krate":0,"index":1232},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1238}],"decl_id":null,"docs":" Types which operate over [`Write`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1240},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5405,"byte_end":5412,"line_start":157,"line_end":157,"column_start":9,"column_end":16},"name":"bufread","qualname":"::bufread","value":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1244},{"krate":0,"index":1246},{"krate":0,"index":1248},{"krate":0,"index":1250},{"krate":0,"index":1252},{"krate":0,"index":1254}],"decl_id":null,"docs":" Types which operate over [`BufRead`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1554},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6643,"byte_end":6654,"line_start":188,"line_end":188,"column_start":12,"column_end":23},"name":"Compression","qualname":"::Compression","value":"","parent":null,"children":[],"decl_id":null,"docs":" When compressing data, the compression level can be specified by a value in\n this enum.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6632,"byte_end":6660,"line_start":188,"line_end":188,"column_start":1,"column_end":29}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6632,"byte_end":6660,"line_start":188,"line_end":188,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1262},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6942,"byte_end":6945,"line_start":196,"line_end":196,"column_start":12,"column_end":15},"name":"new","qualname":"<Compression>::new","value":"fn (level: u32) -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Creates a new description of the compression level with an explicitly\n specified integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7126,"byte_end":7130,"line_start":202,"line_end":202,"column_start":12,"column_end":16},"name":"none","qualname":"<Compression>::none","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" No compression is to be performed, this may actually inflate data\n slightly when encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7240,"byte_end":7244,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"name":"fast","qualname":"<Compression>::fast","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the best speed of encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7358,"byte_end":7362,"line_start":212,"line_end":212,"column_start":12,"column_end":16},"name":"best","qualname":"<Compression>::best","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the size of data being encoded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7522,"byte_end":7527,"line_start":218,"line_end":218,"column_start":12,"column_end":17},"name":"level","qualname":"<Compression>::level","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns an integer representing the compression level, typically on a\n scale of 0-9\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8482,"byte_end":8491,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8877,"byte_end":8886,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":9213,"byte_end":9222,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":9589,"byte_end":9598,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":10139,"byte_end":10148,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11086,"byte_end":11089,"line_start":26,"line_end":26,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12074,"byte_end":12083,"line_start":62,"line_end":62,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12258,"byte_end":12267,"line_start":72,"line_end":72,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12904,"byte_end":12913,"line_start":99,"line_end":99,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13117,"byte_end":13126,"line_start":107,"line_end":107,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13612,"byte_end":13621,"line_start":128,"line_end":128,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14250,"byte_end":14259,"line_start":155,"line_end":155,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14451,"byte_end":14460,"line_start":165,"line_end":165,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22126,"byte_end":22140,"line_start":50,"line_end":50,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22544,"byte_end":22558,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24123,"byte_end":24137,"line_start":113,"line_end":113,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24394,"byte_end":24408,"line_start":122,"line_end":122,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26044,"byte_end":26058,"line_start":180,"line_end":180,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26315,"byte_end":26329,"line_start":191,"line_end":191,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28034,"byte_end":28048,"line_start":244,"line_end":244,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28307,"byte_end":28321,"line_start":253,"line_end":253,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":29908,"byte_end":29922,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30247,"byte_end":30261,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32263,"byte_end":32277,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32496,"byte_end":32510,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34045,"byte_end":34059,"line_start":172,"line_end":172,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34676,"byte_end":34690,"line_start":190,"line_end":190,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36585,"byte_end":36599,"line_start":242,"line_end":242,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36820,"byte_end":36834,"line_start":251,"line_end":251,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38176,"byte_end":38190,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42825,"byte_end":42839,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":43272,"byte_end":43286,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":44762,"byte_end":44776,"line_start":224,"line_end":224,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48470,"byte_end":48484,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48917,"byte_end":48931,"line_start":342,"line_end":342,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,102,102,105,46,114,115],"byte_start":53030,"byte_end":53043,"line_start":139,"line_end":139,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,102,102,105,46,114,115],"byte_start":53211,"byte_end":53224,"line_start":145,"line_end":145,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,102,102,105,46,114,115],"byte_start":53394,"byte_end":53407,"line_start":153,"line_end":153,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,102,102,105,46,114,115],"byte_start":53550,"byte_end":53563,"line_start":161,"line_end":161,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":69262,"byte_end":69271,"line_start":163,"line_end":163,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70299,"byte_end":70308,"line_start":194,"line_end":194,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70908,"byte_end":70917,"line_start":214,"line_end":214,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":71602,"byte_end":71611,"line_start":238,"line_end":238,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":72990,"byte_end":72999,"line_start":288,"line_end":288,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74372,"byte_end":74381,"line_start":337,"line_end":337,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":75169,"byte_end":75178,"line_start":362,"line_end":362,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":75800,"byte_end":75809,"line_start":385,"line_end":385,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":77690,"byte_end":77704,"line_start":442,"line_end":442,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":79651,"byte_end":79665,"line_start":506,"line_end":506,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":80434,"byte_end":80448,"line_start":531,"line_end":531,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":80976,"byte_end":80990,"line_start":548,"line_end":548,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":82342,"byte_end":82351,"line_start":44,"line_end":44,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":82807,"byte_end":82816,"line_start":57,"line_end":57,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":578},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":83413,"byte_end":83422,"line_start":77,"line_end":77,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":83562,"byte_end":83571,"line_start":83,"line_end":83,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":84864,"byte_end":84873,"line_start":132,"line_end":132,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85126,"byte_end":85135,"line_start":142,"line_end":142,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85890,"byte_end":85899,"line_start":167,"line_end":167,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86039,"byte_end":86048,"line_start":173,"line_end":173,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":87853,"byte_end":87867,"line_start":228,"line_end":228,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88217,"byte_end":88231,"line_start":239,"line_end":239,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88992,"byte_end":89006,"line_start":264,"line_end":264,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":89146,"byte_end":89160,"line_start":270,"line_end":270,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":90718,"byte_end":90727,"line_start":55,"line_end":55,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":690},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":93927,"byte_end":93936,"line_start":145,"line_end":145,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":94570,"byte_end":94579,"line_start":169,"line_end":169,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":94802,"byte_end":94811,"line_start":178,"line_end":178,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":96253,"byte_end":96262,"line_start":228,"line_end":228,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":99756,"byte_end":99763,"line_start":330,"line_end":330,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":99947,"byte_end":99956,"line_start":338,"line_end":338,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":734},{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":101873,"byte_end":101882,"line_start":396,"line_end":396,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":54299,"byte_end":54307,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57328,"byte_end":57337,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,105,111,46,114,115],"byte_start":105741,"byte_end":105749,"line_start":32,"line_end":32,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,105,111,46,114,115],"byte_start":106369,"byte_end":106379,"line_start":58,"line_end":58,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":832},{"krate":0,"index":834}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,105,111,46,114,115],"byte_start":107077,"byte_end":107090,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,105,111,46,114,115],"byte_start":107291,"byte_end":107306,"line_start":104,"line_end":104,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":854},{"krate":0,"index":856},{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,105,111,46,114,115],"byte_start":108902,"byte_end":108908,"line_start":159,"line_end":159,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":878},{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,105,111,46,114,115],"byte_start":111927,"byte_end":111933,"line_start":254,"line_end":254,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,105,111,46,114,115],"byte_start":112961,"byte_end":112967,"line_start":284,"line_end":284,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":114735,"byte_end":114741,"line_start":54,"line_end":54,"column_start":36,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":114783,"byte_end":114789,"line_start":55,"line_end":55,"column_start":36,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":118528,"byte_end":118543,"line_start":150,"line_end":150,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":120106,"byte_end":120114,"line_start":194,"line_end":194,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":928},{"krate":0,"index":930},{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":936},{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":126254,"byte_end":126264,"line_start":355,"line_end":355,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":952},{"krate":0,"index":954}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":133057,"byte_end":133072,"line_start":533,"line_end":533,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":958}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":133193,"byte_end":133198,"line_start":539,"line_end":539,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":133333,"byte_end":133348,"line_start":545,"line_end":545,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":133468,"byte_end":133481,"line_start":551,"line_end":551,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":133598,"byte_end":133603,"line_start":557,"line_end":557,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":974}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":133736,"byte_end":133749,"line_start":563,"line_end":563,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":133873,"byte_end":133884,"line_start":569,"line_end":569,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":134011,"byte_end":134024,"line_start":574,"line_end":574,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":134161,"byte_end":134167,"line_start":580,"line_end":580,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":145838,"byte_end":145849,"line_start":46,"line_end":46,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":146242,"byte_end":146253,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1018},{"krate":0,"index":1020},{"krate":0,"index":1022},{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":147818,"byte_end":147829,"line_start":109,"line_end":109,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":148083,"byte_end":148094,"line_start":118,"line_end":118,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1036},{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149599,"byte_end":149610,"line_start":174,"line_end":174,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149960,"byte_end":149971,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":151429,"byte_end":151440,"line_start":234,"line_end":234,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":151696,"byte_end":151707,"line_start":243,"line_end":243,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1066},{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":153168,"byte_end":153179,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":153495,"byte_end":153506,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1086},{"krate":0,"index":1088},{"krate":0,"index":1090},{"krate":0,"index":1092},{"krate":0,"index":1094},{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":155508,"byte_end":155519,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":155735,"byte_end":155746,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1104},{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":157242,"byte_end":157253,"line_start":171,"line_end":171,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1110},{"krate":0,"index":1112}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":157870,"byte_end":157881,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":159776,"byte_end":159787,"line_start":241,"line_end":241,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":160005,"byte_end":160016,"line_start":250,"line_end":250,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1134},{"krate":0,"index":1136}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":161373,"byte_end":161384,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1154},{"krate":0,"index":1156},{"krate":0,"index":1158},{"krate":0,"index":1160},{"krate":0,"index":1162},{"krate":0,"index":1164},{"krate":0,"index":1166},{"krate":0,"index":1168},{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":165949,"byte_end":165960,"line_start":159,"line_end":159,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":166382,"byte_end":166393,"line_start":177,"line_end":177,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1180}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":167829,"byte_end":167840,"line_start":226,"line_end":226,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1192},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171395,"byte_end":171406,"line_start":323,"line_end":323,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1202},{"krate":0,"index":1204}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171836,"byte_end":171847,"line_start":341,"line_end":341,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1208}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6667,"byte_end":6678,"line_start":190,"line_end":190,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1262},{"krate":0,"index":1264},{"krate":0,"index":1266},{"krate":0,"index":1268},{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7585,"byte_end":7596,"line_start":223,"line_end":223,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1274}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8482,"byte_end":8491,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":50},"to":{"krate":2,"index":8064}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8877,"byte_end":8886,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":9213,"byte_end":9222,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":9589,"byte_end":9598,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":50},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":10139,"byte_end":10148,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":50},"to":{"krate":1,"index":4390}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11086,"byte_end":11089,"line_start":26,"line_end":26,"column_start":6,"column_end":9},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":1276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12074,"byte_end":12083,"line_start":62,"line_end":62,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":1282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12258,"byte_end":12267,"line_start":72,"line_end":72,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":1282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12904,"byte_end":12913,"line_start":99,"line_end":99,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":1282},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13117,"byte_end":13126,"line_start":107,"line_end":107,"column_start":30,"column_end":39},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":1282},"to":{"krate":1,"index":4390}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":13612,"byte_end":13621,"line_start":128,"line_end":128,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":1288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14250,"byte_end":14259,"line_start":155,"line_end":155,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":1288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,99,114,99,46,114,115],"byte_start":14451,"byte_end":14460,"line_start":165,"line_end":165,"column_start":26,"column_end":35},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":1288},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22126,"byte_end":22140,"line_start":50,"line_end":50,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":1294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22544,"byte_end":22558,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":1294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24123,"byte_end":24137,"line_start":113,"line_end":113,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":1294},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24394,"byte_end":24408,"line_start":122,"line_end":122,"column_start":36,"column_end":50},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":1294},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26044,"byte_end":26058,"line_start":180,"line_end":180,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":1300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26315,"byte_end":26329,"line_start":191,"line_end":191,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":1300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28034,"byte_end":28048,"line_start":244,"line_end":244,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":1300},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28307,"byte_end":28321,"line_start":253,"line_end":253,"column_start":36,"column_end":50},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":1300},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":29908,"byte_end":29922,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":1306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30247,"byte_end":30261,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":1306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32263,"byte_end":32277,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":1306},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32496,"byte_end":32510,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":1306},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34045,"byte_end":34059,"line_start":172,"line_end":172,"column_start":15,"column_end":29},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":1312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34676,"byte_end":34690,"line_start":190,"line_end":190,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":1312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36585,"byte_end":36599,"line_start":242,"line_end":242,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":1312},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":36820,"byte_end":36834,"line_start":251,"line_end":251,"column_start":33,"column_end":47},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":1312},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38176,"byte_end":38190,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":1318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42825,"byte_end":42839,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":1318},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":43272,"byte_end":43286,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":1318},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":44762,"byte_end":44776,"line_start":224,"line_end":224,"column_start":16,"column_end":30},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":1324},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48470,"byte_end":48484,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":1324},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":48917,"byte_end":48931,"line_start":342,"line_end":342,"column_start":32,"column_end":46},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":1324},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,102,102,105,46,114,115],"byte_start":53030,"byte_end":53043,"line_start":139,"line_end":139,"column_start":32,"column_end":45},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":390},"to":{"krate":2,"index":8064}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,102,102,105,46,114,115],"byte_start":53211,"byte_end":53224,"line_start":145,"line_end":145,"column_start":22,"column_end":35},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":390},"to":{"krate":2,"index":2584}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,102,102,105,46,114,115],"byte_start":53394,"byte_end":53407,"line_start":153,"line_end":153,"column_start":20,"column_end":33},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":390},"to":{"krate":2,"index":1916}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,102,102,105,46,114,115],"byte_start":53550,"byte_end":53563,"line_start":161,"line_end":161,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":390},"to":{"krate":2,"index":1934}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":69262,"byte_end":69271,"line_start":163,"line_end":163,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":1330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70299,"byte_end":70308,"line_start":194,"line_end":194,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":1330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70908,"byte_end":70917,"line_start":214,"line_end":214,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":1330},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":71602,"byte_end":71611,"line_start":238,"line_end":238,"column_start":36,"column_end":45},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":1330},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":72990,"byte_end":72999,"line_start":288,"line_end":288,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":1336},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74372,"byte_end":74381,"line_start":337,"line_end":337,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":1336},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":75169,"byte_end":75178,"line_start":362,"line_end":362,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":1336},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":75800,"byte_end":75809,"line_start":385,"line_end":385,"column_start":36,"column_end":45},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":1336},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":77690,"byte_end":77704,"line_start":442,"line_end":442,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":1342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":79651,"byte_end":79665,"line_start":506,"line_end":506,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":1342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":80434,"byte_end":80448,"line_start":531,"line_end":531,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":1342},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":80976,"byte_end":80990,"line_start":548,"line_end":548,"column_start":36,"column_end":50},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":1342},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":82342,"byte_end":82351,"line_start":44,"line_end":44,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":1348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":82807,"byte_end":82816,"line_start":57,"line_end":57,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":1348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":83413,"byte_end":83422,"line_start":77,"line_end":77,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":1348},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":83562,"byte_end":83571,"line_start":83,"line_end":83,"column_start":33,"column_end":42},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":1348},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":84864,"byte_end":84873,"line_start":132,"line_end":132,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":1354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85126,"byte_end":85135,"line_start":142,"line_end":142,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":1354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85890,"byte_end":85899,"line_start":167,"line_end":167,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":1354},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86039,"byte_end":86048,"line_start":173,"line_end":173,"column_start":33,"column_end":42},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":1354},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":87853,"byte_end":87867,"line_start":228,"line_end":228,"column_start":15,"column_end":29},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88217,"byte_end":88231,"line_start":239,"line_end":239,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":1360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88992,"byte_end":89006,"line_start":264,"line_end":264,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":89146,"byte_end":89160,"line_start":270,"line_end":270,"column_start":33,"column_end":47},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":1360},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":90718,"byte_end":90727,"line_start":55,"line_end":55,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":1366},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":93927,"byte_end":93936,"line_start":145,"line_end":145,"column_start":26,"column_end":35},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":1366},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":94570,"byte_end":94579,"line_start":169,"line_end":169,"column_start":32,"column_end":41},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":1366},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":94802,"byte_end":94811,"line_start":178,"line_end":178,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":1366},"to":{"krate":2,"index":1944}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":96253,"byte_end":96262,"line_start":228,"line_end":228,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":1372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":99756,"byte_end":99763,"line_start":330,"line_end":330,"column_start":24,"column_end":31},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":726},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":99947,"byte_end":99956,"line_start":338,"line_end":338,"column_start":26,"column_end":35},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":1372},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":101873,"byte_end":101882,"line_start":396,"line_end":396,"column_start":32,"column_end":41},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":1372},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":54299,"byte_end":54307,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":1378},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57328,"byte_end":57337,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":1394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,105,111,46,114,115],"byte_start":105741,"byte_end":105749,"line_start":32,"line_end":32,"column_start":14,"column_end":22},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":1406},"to":{"krate":0,"index":800}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,105,111,46,114,115],"byte_start":106369,"byte_end":106379,"line_start":58,"line_end":58,"column_start":14,"column_end":24},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":1412},"to":{"krate":0,"index":800}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,105,111,46,114,115],"byte_start":107077,"byte_end":107090,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":1436},"to":{"krate":0,"index":836}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,105,111,46,114,115],"byte_start":107291,"byte_end":107306,"line_start":104,"line_end":104,"column_start":16,"column_end":31},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":1456},"to":{"krate":0,"index":836}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,105,111,46,114,115],"byte_start":108902,"byte_end":108908,"line_start":159,"line_end":159,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":1400},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,105,111,46,114,115],"byte_start":111927,"byte_end":111933,"line_start":254,"line_end":254,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":1400},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,105,111,46,114,115],"byte_start":112961,"byte_end":112967,"line_start":284,"line_end":284,"column_start":33,"column_end":39},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":1400},"to":{"krate":2,"index":1944}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":114735,"byte_end":114741,"line_start":54,"line_end":54,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":1418},"to":{"krate":2,"index":1672}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":114783,"byte_end":114789,"line_start":55,"line_end":55,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":1418},"to":{"krate":2,"index":1684}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":118528,"byte_end":118543,"line_start":150,"line_end":150,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":1486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":120106,"byte_end":120114,"line_start":194,"line_end":194,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":1406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":126254,"byte_end":126264,"line_start":355,"line_end":355,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":0,"index":1412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":133057,"byte_end":133072,"line_start":533,"line_end":533,"column_start":16,"column_end":31},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":0,"index":1486},"to":{"krate":1,"index":2452}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":133193,"byte_end":133198,"line_start":539,"line_end":539,"column_start":36,"column_end":41},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":1,"index":3814},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":133333,"byte_end":133348,"line_start":545,"line_end":545,"column_start":23,"column_end":38},"kind":{"variant":"Impl","fields":[87]},"from":{"krate":0,"index":1486},"to":{"krate":2,"index":8068}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":133468,"byte_end":133481,"line_start":551,"line_end":551,"column_start":16,"column_end":29},"kind":{"variant":"Impl","fields":[88]},"from":{"krate":0,"index":1492},"to":{"krate":1,"index":2452}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":133598,"byte_end":133603,"line_start":557,"line_end":557,"column_start":34,"column_end":39},"kind":{"variant":"Impl","fields":[89]},"from":{"krate":1,"index":3814},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":133736,"byte_end":133749,"line_start":563,"line_end":563,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[90]},"from":{"krate":0,"index":1492},"to":{"krate":2,"index":8068}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":133873,"byte_end":133884,"line_start":569,"line_end":569,"column_start":20,"column_end":31},"kind":{"variant":"Impl","fields":[91]},"from":{"krate":0,"index":1424},"to":{"krate":0,"index":918}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":134011,"byte_end":134024,"line_start":574,"line_end":574,"column_start":20,"column_end":33},"kind":{"variant":"Impl","fields":[92]},"from":{"krate":0,"index":1430},"to":{"krate":0,"index":918}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,109,101,109,46,114,115],"byte_start":134161,"byte_end":134167,"line_start":580,"line_end":580,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[93]},"from":{"krate":0,"index":1418},"to":{"krate":2,"index":1944}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":145838,"byte_end":145849,"line_start":46,"line_end":46,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[94]},"from":{"krate":0,"index":1518},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":146242,"byte_end":146253,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[95]},"from":{"krate":0,"index":1518},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":147818,"byte_end":147829,"line_start":109,"line_end":109,"column_start":27,"column_end":38},"kind":{"variant":"Impl","fields":[96]},"from":{"krate":0,"index":1518},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":148083,"byte_end":148094,"line_start":118,"line_end":118,"column_start":36,"column_end":47},"kind":{"variant":"Impl","fields":[97]},"from":{"krate":0,"index":1518},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149599,"byte_end":149610,"line_start":174,"line_end":174,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[98]},"from":{"krate":0,"index":1524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":149960,"byte_end":149971,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[99]},"from":{"krate":0,"index":1524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":151429,"byte_end":151440,"line_start":234,"line_end":234,"column_start":27,"column_end":38},"kind":{"variant":"Impl","fields":[100]},"from":{"krate":0,"index":1524},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":151696,"byte_end":151707,"line_start":243,"line_end":243,"column_start":36,"column_end":47},"kind":{"variant":"Impl","fields":[101]},"from":{"krate":0,"index":1524},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":153168,"byte_end":153179,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"kind":{"variant":"Impl","fields":[102]},"from":{"krate":0,"index":1530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":153495,"byte_end":153506,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[103]},"from":{"krate":0,"index":1530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":155508,"byte_end":155519,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"kind":{"variant":"Impl","fields":[104]},"from":{"krate":0,"index":1530},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":155735,"byte_end":155746,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"kind":{"variant":"Impl","fields":[105]},"from":{"krate":0,"index":1530},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":157242,"byte_end":157253,"line_start":171,"line_end":171,"column_start":15,"column_end":26},"kind":{"variant":"Impl","fields":[106]},"from":{"krate":0,"index":1536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":157870,"byte_end":157881,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[107]},"from":{"krate":0,"index":1536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":159776,"byte_end":159787,"line_start":241,"line_end":241,"column_start":24,"column_end":35},"kind":{"variant":"Impl","fields":[108]},"from":{"krate":0,"index":1536},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":160005,"byte_end":160016,"line_start":250,"line_end":250,"column_start":33,"column_end":44},"kind":{"variant":"Impl","fields":[109]},"from":{"krate":0,"index":1536},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":161373,"byte_end":161384,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"kind":{"variant":"Impl","fields":[110]},"from":{"krate":0,"index":1542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":165949,"byte_end":165960,"line_start":159,"line_end":159,"column_start":26,"column_end":37},"kind":{"variant":"Impl","fields":[111]},"from":{"krate":0,"index":1542},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":166382,"byte_end":166393,"line_start":177,"line_end":177,"column_start":32,"column_end":43},"kind":{"variant":"Impl","fields":[112]},"from":{"krate":0,"index":1542},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":167829,"byte_end":167840,"line_start":226,"line_end":226,"column_start":16,"column_end":27},"kind":{"variant":"Impl","fields":[113]},"from":{"krate":0,"index":1548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171395,"byte_end":171406,"line_start":323,"line_end":323,"column_start":26,"column_end":37},"kind":{"variant":"Impl","fields":[114]},"from":{"krate":0,"index":1548},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":171836,"byte_end":171847,"line_start":341,"line_end":341,"column_start":32,"column_end":43},"kind":{"variant":"Impl","fields":[115]},"from":{"krate":0,"index":1548},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6667,"byte_end":6678,"line_start":190,"line_end":190,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[116]},"from":{"krate":0,"index":1554},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7585,"byte_end":7596,"line_start":223,"line_end":223,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[117]},"from":{"krate":0,"index":1554},"to":{"krate":2,"index":2584}}]}