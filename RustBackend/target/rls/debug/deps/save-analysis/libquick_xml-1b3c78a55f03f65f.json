{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52],"program":"/home/aron/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","quick_xml","/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=1b3c78a55f03f65f","-C","extra-filename=-1b3c78a55f03f65f","--out-dir","/home/aron/rust/xml_to_mysql/target/rls/debug/deps","-L","dependency=/home/aron/rust/xml_to_mysql/target/rls/debug/deps","--extern","encoding_rs=/home/aron/rust/xml_to_mysql/target/rls/debug/deps/libencoding_rs-af9a048e3aa09b75.rmeta","--extern","failure=/home/aron/rust/xml_to_mysql/target/rls/debug/deps/libfailure-d7f222c7250d97c2.rmeta","--extern","log=/home/aron/rust/xml_to_mysql/target/rls/debug/deps/liblog-52f37165db0e5bf4.rmeta","--extern","memchr=/home/aron/rust/xml_to_mysql/target/rls/debug/deps/libmemchr-d9f2b18e15185908.rmeta","--cap-lints","allow","-L","native=/home/aron/rust/xml_to_mysql/target/rls/debug/build/backtrace-sys-938dc2244a607ca9/out","--error-format=json","--sysroot","/home/aron/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,97,114,111,110,47,114,117,115,116,47,120,109,108,95,116,111,95,109,121,115,113,108,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,113,117,105,99,107,95,120,109,108,45,49,98,51,99,55,56,97,53,53,102,48,51,102,54,53,102,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"quick_xml","disambiguator":[102401002325815550,7536671884821684841]},"crate_root":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src","external_crates":[{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[13653490757311001470,18210972786764511751]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10798836723055308036,13313936280221541629]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4173213016744015638,3014784451015659406]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[11944383677982007713,15257420578295466644]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":5,"id":{"name":"libc","disambiguator":[4959566726620691501,6146722101769139636]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":6,"id":{"name":"unwind","disambiguator":[11525715658488109252,1561200000967009509]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":7,"id":{"name":"panic_unwind","disambiguator":[14286758744204974931,8495317743760309751]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":8,"id":{"name":"encoding_rs","disambiguator":[38095253857174589,13828498485330368546]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":9,"id":{"name":"cfg_if","disambiguator":[7763573116459283150,10356585151666294548]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":10,"id":{"name":"failure","disambiguator":[13042001422100749477,1602300037837352553]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":11,"id":{"name":"failure_derive","disambiguator":[12162369788056399291,14692331823785905166]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":12,"id":{"name":"backtrace","disambiguator":[1024886907153583649,16761998050323935644]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":13,"id":{"name":"libc","disambiguator":[2114940872754216120,16832356387425244416]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[112945916918924139,7756897825492891048]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":15,"id":{"name":"backtrace_sys","disambiguator":[17989601573610316199,6901537940759905452]}},{"file_name":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[9306700912207574038,786667135201173888]}}],"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":4251,"line_start":1,"line_end":122,"column_start":1,"column_end":24}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":418},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4188,"byte_end":4193,"line_start":120,"line_end":120,"column_start":18,"column_end":23},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":14},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4195,"byte_end":4201,"line_start":120,"line_end":120,"column_start":25,"column_end":31},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":300},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4220,"byte_end":4226,"line_start":121,"line_end":121,"column_start":17,"column_end":23},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":558},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4244,"byte_end":4250,"line_start":122,"line_end":122,"column_start":17,"column_end":23},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":4251,"line_start":1,"line_end":122,"column_start":1,"column_end":24},"name":"","qualname":"::","value":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":16},{"krate":0,"index":50},{"krate":0,"index":256},{"krate":0,"index":374},{"krate":0,"index":408},{"krate":0,"index":414},{"krate":0,"index":416}],"decl_id":null,"docs":" High performance XML reader/writer.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3957,"byte_end":3979,"line_start":105,"line_end":105,"column_start":1,"column_end":23}},{"value":"recursion_limit = \"1024\"","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3980,"byte_end":4008,"line_start":106,"line_end":106,"column_start":1,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":275},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":4425,"byte_end":4427,"line_start":9,"line_end":9,"column_start":5,"column_end":7},"name":"Io","qualname":"::errors::Error::Io","value":"Error::Io(::std::io::Error)","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display = \"I/O error\")","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":4390,"byte_end":4420,"line_start":8,"line_end":8,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":279},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":4497,"byte_end":4501,"line_start":12,"line_end":12,"column_start":5,"column_end":9},"name":"Utf8","qualname":"::errors::Error::Utf8","value":"Error::Utf8(::std::str::Utf8Error)","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display = \"UTF8 error\")","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":4461,"byte_end":4492,"line_start":11,"line_end":11,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":283},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":4603,"byte_end":4616,"line_start":15,"line_end":15,"column_start":5,"column_end":18},"name":"UnexpectedEof","qualname":"::errors::Error::UnexpectedEof","value":"Error::UnexpectedEof(String)","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display = \"Unexpected EOF during reading {}.\", _0)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":4540,"byte_end":4598,"line_start":14,"line_end":14,"column_start":5,"column_end":63}}]},{"kind":"StructVariant","id":{"krate":0,"index":287},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":4701,"byte_end":4717,"line_start":18,"line_end":18,"column_start":5,"column_end":21},"name":"EndEventMismatch","qualname":"::errors::Error::EndEventMismatch","value":"Error::EndEventMismatch { expected, found }","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display = \"Expecting </{}> found </{}>\", expected, found)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":4631,"byte_end":4696,"line_start":17,"line_end":17,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":293},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":4811,"byte_end":4826,"line_start":21,"line_end":21,"column_start":5,"column_end":20},"name":"UnexpectedToken","qualname":"::errors::Error::UnexpectedToken","value":"Error::UnexpectedToken(String)","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display = \"Unexpected token \\'{}\\'\", _0)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":4760,"byte_end":4806,"line_start":20,"line_end":20,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":297},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":4925,"byte_end":4939,"line_start":24,"line_end":24,"column_start":5,"column_end":19},"name":"UnexpectedBang","qualname":"::errors::Error::UnexpectedBang","value":"Error::UnexpectedBang","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display =\n           \"Only Comment, CDATA and DOCTYPE nodes can start with a \\'!\\'\")","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":4841,"byte_end":4920,"line_start":23,"line_end":23,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":299},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":5011,"byte_end":5023,"line_start":27,"line_end":27,"column_start":5,"column_end":17},"name":"TextNotFound","qualname":"::errors::Error::TextNotFound","value":"Error::TextNotFound","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display = \"Cannot read text, expecting Event::Text\")","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":4946,"byte_end":5006,"line_start":26,"line_end":26,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":301},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":5137,"byte_end":5158,"line_start":33,"line_end":33,"column_start":5,"column_end":26},"name":"XmlDeclWithoutVersion","qualname":"::errors::Error::XmlDeclWithoutVersion","value":"Error::XmlDeclWithoutVersion(Option<String>)","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display = \"XmlDecl must start with \\'version\\' attribute, found {:?}\",\n       _0)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":5030,"byte_end":5132,"line_start":29,"line_end":32,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":305},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":5314,"byte_end":5327,"line_start":39,"line_end":39,"column_start":5,"column_end":18},"name":"NameWithQuote","qualname":"::errors::Error::NameWithQuote","value":"Error::NameWithQuote(usize)","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display =\n           \"error while parsing attribute at position {}: Attribute key cannot contain quote.\",\n       _0)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":5181,"byte_end":5309,"line_start":35,"line_end":38,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":309},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":5492,"byte_end":5505,"line_start":45,"line_end":45,"column_start":5,"column_end":18},"name":"NoEqAfterName","qualname":"::errors::Error::NoEqAfterName","value":"Error::NoEqAfterName(usize)","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display =\n           \"error while parsing attribute at position {}: Attribute key must be directly followed by = or space\",\n       _0)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":5341,"byte_end":5487,"line_start":41,"line_end":44,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":313},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":5657,"byte_end":5670,"line_start":51,"line_end":51,"column_start":5,"column_end":18},"name":"UnquotedValue","qualname":"::errors::Error::UnquotedValue","value":"Error::UnquotedValue(usize)","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display =\n           \"error while parsing attribute at position {}: Attribute value must start with a quote.\",\n       _0)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":5519,"byte_end":5652,"line_start":47,"line_end":50,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":317},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":5847,"byte_end":5866,"line_start":59,"line_end":59,"column_start":5,"column_end":24},"name":"DuplicatedAttribute","qualname":"::errors::Error::DuplicatedAttribute","value":"Error::DuplicatedAttribute(usize, usize)","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display =\n           \"error while parsing attribute at position {}: Duplicate attribute at position {} and {}\",\n       _0,\n       _1,\n       _0)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":5684,"byte_end":5842,"line_start":53,"line_end":58,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":323},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":5919,"byte_end":5930,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"EscapeError","qualname":"::errors::Error::EscapeError","value":"Error::EscapeError(::escape::EscapeError)","parent":{"krate":0,"index":418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display = \"{}\", _0)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":5887,"byte_end":5914,"line_start":61,"line_end":61,"column_start":5,"column_end":32}}]},{"kind":"Enum","id":{"krate":0,"index":418},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":4378,"byte_end":4383,"line_start":7,"line_end":7,"column_start":10,"column_end":15},"name":"Error","qualname":"::errors::Error","value":"Error::{Io, Utf8, UnexpectedEof, EndEventMismatch, UnexpectedToken, UnexpectedBang, TextNotFound, XmlDeclWithoutVersion, NameWithQuote, NoEqAfterName, UnquotedValue, DuplicatedAttribute, EscapeError}","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":279},{"krate":0,"index":283},{"krate":0,"index":287},{"krate":0,"index":293},{"krate":0,"index":297},{"krate":0,"index":299},{"krate":0,"index":301},{"krate":0,"index":305},{"krate":0,"index":309},{"krate":0,"index":313},{"krate":0,"index":317},{"krate":0,"index":323}],"decl_id":null,"docs":" The error type used by this crate.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":14},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":6087,"byte_end":6093,"line_start":68,"line_end":68,"column_start":10,"column_end":16},"name":"Result","qualname":"::errors::Result","value":"::std::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A specialized `Result` type where the error is hard-wired to [`Error`].","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":327},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":6406,"byte_end":6420,"line_start":13,"line_end":13,"column_start":5,"column_end":19},"name":"EntityWithNull","qualname":"::escape::EscapeError::EntityWithNull","value":"EscapeError::EntityWithNull(::std::ops::Range<usize>)","parent":{"krate":0,"index":440},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display =\n           \"Error while escaping character at range {:?}: Null character entity not allowed\",\n       _0)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":6275,"byte_end":6401,"line_start":9,"line_end":12,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":331},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":6595,"byte_end":6613,"line_start":20,"line_end":20,"column_start":5,"column_end":23},"name":"UnrecognizedSymbol","qualname":"::escape::EscapeError::UnrecognizedSymbol","value":"EscapeError::UnrecognizedSymbol(::std::ops::Range<usize>, ::std::result::Result<String, ::std::string::FromUtf8Error>)","parent":{"krate":0,"index":440},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display =\n           \"Error while escaping character at range {:?}: Unrecognized escape symbol: {:?}\",\n       _0,\n       _1)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":6453,"byte_end":6590,"line_start":15,"line_end":19,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":337},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":6853,"byte_end":6871,"line_start":29,"line_end":29,"column_start":5,"column_end":23},"name":"UnterminatedEntity","qualname":"::escape::EscapeError::UnterminatedEntity","value":"EscapeError::UnterminatedEntity(::std::ops::Range<usize>)","parent":{"krate":0,"index":440},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display =\n           \"Error while escaping character at range {:?}: Cannot find \\';\\' after \\'&\\'\",\n       _0)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":6730,"byte_end":6848,"line_start":25,"line_end":28,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":341},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":6964,"byte_end":6982,"line_start":32,"line_end":32,"column_start":5,"column_end":23},"name":"TooLongHexadecimal","qualname":"::escape::EscapeError::TooLongHexadecimal","value":"EscapeError::TooLongHexadecimal","parent":{"krate":0,"index":440},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display = \"Cannot convert hexadecimal to utf8\")","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":6904,"byte_end":6959,"line_start":31,"line_end":31,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":343},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":7060,"byte_end":7078,"line_start":35,"line_end":35,"column_start":5,"column_end":23},"name":"InvalidHexadecimal","qualname":"::escape::EscapeError::InvalidHexadecimal","value":"EscapeError::InvalidHexadecimal(char)","parent":{"krate":0,"index":440},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display = \"\\'{}\\' is not a valid hexadecimal character\", _0)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":6989,"byte_end":7055,"line_start":34,"line_end":34,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":347},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":7147,"byte_end":7161,"line_start":38,"line_end":38,"column_start":5,"column_end":19},"name":"TooLongDecimal","qualname":"::escape::EscapeError::TooLongDecimal","value":"EscapeError::TooLongDecimal","parent":{"krate":0,"index":440},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display = \"Cannot convert decimal to utf8\")","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":7091,"byte_end":7142,"line_start":37,"line_end":37,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":349},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":7235,"byte_end":7249,"line_start":41,"line_end":41,"column_start":5,"column_end":19},"name":"InvalidDecimal","qualname":"::escape::EscapeError::InvalidDecimal","value":"EscapeError::InvalidDecimal(char)","parent":{"krate":0,"index":440},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"fail(display = \"\\'{}\\' is not a valid decimal character\", _0)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":7168,"byte_end":7230,"line_start":40,"line_end":40,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":440},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":6257,"byte_end":6268,"line_start":8,"line_end":8,"column_start":10,"column_end":21},"name":"EscapeError","qualname":"::escape::EscapeError","value":"EscapeError::{EntityWithNull, UnrecognizedSymbol, UnterminatedEntity, TooLongHexadecimal, InvalidHexadecimal, TooLongDecimal, InvalidDecimal}","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":331},{"krate":0,"index":337},{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":347},{"krate":0,"index":349}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,115,99,97,112,101,46,114,115],"byte_start":6202,"byte_end":6224,"line_start":6,"line_end":6,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"events","qualname":"::events","value":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/events/mod.rs","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":126},{"krate":0,"index":132},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":484},{"krate":0,"index":490},{"krate":0,"index":486},{"krate":0,"index":142},{"krate":0,"index":494},{"krate":0,"index":500},{"krate":0,"index":496},{"krate":0,"index":172},{"krate":0,"index":504},{"krate":0,"index":510},{"krate":0,"index":506},{"krate":0,"index":188},{"krate":0,"index":514},{"krate":0,"index":520},{"krate":0,"index":516},{"krate":0,"index":200},{"krate":0,"index":524},{"krate":0,"index":530},{"krate":0,"index":526},{"krate":0,"index":218},{"krate":0,"index":222},{"krate":0,"index":228},{"krate":0,"index":234},{"krate":0,"index":240},{"krate":0,"index":246},{"krate":0,"index":252}],"decl_id":null,"docs":" Defines zero-copy XML events used throughout this library.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"attributes","qualname":"::events::attributes","value":"/home/aron/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-xml-0.12.4/src/events/attributes.rs","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":60},{"krate":0,"index":66},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":78},{"krate":0,"index":468},{"krate":0,"index":480},{"krate":0,"index":476},{"krate":0,"index":470},{"krate":0,"index":86},{"krate":0,"index":92},{"krate":0,"index":96},{"krate":0,"index":100}],"decl_id":null,"docs":" Xml Attributes module","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":462},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":31587,"byte_end":31597,"line_start":19,"line_end":19,"column_start":12,"column_end":22},"name":"Attributes","qualname":"::events::attributes::Attributes","value":"Attributes {  }","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":357},{"krate":0,"index":359},{"krate":0,"index":361},{"krate":0,"index":363}],"decl_id":null,"docs":" Iterator over XML attributes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":32124,"byte_end":32127,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Attributes<'a>>::new","value":"fn (buf: &'a [u8], pos: usize) -> Attributes<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new attribute iterator from a buffer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":32453,"byte_end":32457,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"html","qualname":"<Attributes<'a>>::html","value":"fn (buf: &'a [u8], pos: usize) -> Attributes<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new attribute iterator from a buffer, allowing HTML attribute syntax.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":32963,"byte_end":32974,"line_start":62,"line_end":62,"column_start":12,"column_end":23},"name":"with_checks","qualname":"<Attributes<'a>>::with_checks","value":"fn (&mut self, val: bool) -> &mut Attributes<'a>","parent":null,"children":[],"decl_id":null,"docs":" Changes whether attributes should be checked for uniqueness.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":468},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":33513,"byte_end":33522,"line_start":77,"line_end":77,"column_start":12,"column_end":21},"name":"Attribute","qualname":"::events::attributes::Attribute","value":"Attribute { key, value }","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":371}],"decl_id":null,"docs":" A struct representing a key/value XML attribute.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":369},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":33765,"byte_end":33768,"line_start":83,"line_end":83,"column_start":9,"column_end":12},"name":"key","qualname":"::events::attributes::Attribute::key","value":"&'a [u8]","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" The key to uniquely define the attribute.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":371},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":33828,"byte_end":33833,"line_start":85,"line_end":85,"column_start":9,"column_end":14},"name":"value","qualname":"::events::attributes::Attribute::value","value":"std::borrow::Cow<'a, [u8]>","parent":{"krate":0,"index":468},"children":[],"decl_id":null,"docs":" The raw value of the attribute.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":34170,"byte_end":34185,"line_start":95,"line_end":95,"column_start":12,"column_end":27},"name":"unescaped_value","qualname":"<Attribute<'a>>::unescaped_value","value":"fn (&self) -> Result<Cow<[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the unescaped value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":34825,"byte_end":34850,"line_start":109,"line_end":109,"column_start":12,"column_end":37},"name":"unescape_and_decode_value","qualname":"<Attribute<'a>>::unescape_and_decode_value","value":"fn <B> (&self, reader: &Reader<B>) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Returns the unescaped and decoded string value.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":484},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":14126,"byte_end":14136,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"BytesStart","qualname":"::events::BytesStart","value":"BytesStart {  }","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":383}],"decl_id":null,"docs":" Opening tag data (`Event::Start`), with optional attributes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":14456,"byte_end":14464,"line_start":40,"line_end":40,"column_start":12,"column_end":20},"name":"borrowed","qualname":"<BytesStart<'a>>::borrowed","value":"fn (content: &'a [u8], name_len: usize) -> BytesStart<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BytesStart` from the given content (name + attributes).\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":14435,"byte_end":14444,"line_start":39,"line_end":39,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":14713,"byte_end":14726,"line_start":49,"line_end":49,"column_start":12,"column_end":25},"name":"borrowed_name","qualname":"<BytesStart<'a>>::borrowed_name","value":"fn (name: &'a [u8]) -> BytesStart<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BytesStart` from the given name.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":14692,"byte_end":14701,"line_start":48,"line_end":48,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":15011,"byte_end":15016,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"owned","qualname":"<BytesStart<'a>>::owned","value":"fn <C> (content: C, name_len: usize) -> BytesStart<'static>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BytesStart` from the given content (name + attributes)","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":14990,"byte_end":14999,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":15319,"byte_end":15329,"line_start":71,"line_end":71,"column_start":12,"column_end":22},"name":"owned_name","qualname":"<BytesStart<'a>>::owned_name","value":"fn <C> (name: C) -> BytesStart<'static>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BytesStart` from the given name","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":15298,"byte_end":15307,"line_start":70,"line_end":70,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":15589,"byte_end":15599,"line_start":80,"line_end":80,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<BytesStart<'a>>::into_owned","value":"fn (self) -> BytesStart<'static>","parent":null,"children":[],"decl_id":null,"docs":" Converts the event into an owned event.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":16017,"byte_end":16032,"line_start":92,"line_end":92,"column_start":12,"column_end":27},"name":"with_attributes","qualname":"<BytesStart<'a>>::with_attributes","value":"fn <'b, I> (mut self, attributes: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Consumes `self` and yield a new `BytesStart` with additional attributes from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":16281,"byte_end":16285,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"name","qualname":"<BytesStart<'a>>::name","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Gets the undecoded raw tag name as a `&[u8]`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":16555,"byte_end":16565,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"local_name","qualname":"<BytesStart<'a>>::local_name","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Gets the undecoded raw local tag name (excluding namespace) as a `&[u8]`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":16534,"byte_end":16543,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":16857,"byte_end":16866,"line_start":119,"line_end":119,"column_start":12,"column_end":21},"name":"unescaped","qualname":"<BytesStart<'a>>::unescaped","value":"fn (&self) -> Result<Cow<[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Gets the unescaped tag name.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":17033,"byte_end":17043,"line_start":124,"line_end":124,"column_start":12,"column_end":22},"name":"attributes","qualname":"<BytesStart<'a>>::attributes","value":"fn (&self) -> Attributes","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the attributes of this tag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":17230,"byte_end":17245,"line_start":129,"line_end":129,"column_start":12,"column_end":27},"name":"html_attributes","qualname":"<BytesStart<'a>>::html_attributes","value":"fn (&self) -> Attributes","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the HTML-like attributes of this tag (no mandatory quotes or `=`).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":17548,"byte_end":17565,"line_start":138,"line_end":138,"column_start":12,"column_end":29},"name":"extend_attributes","qualname":"<BytesStart<'a>>::extend_attributes","value":"fn <'b, I> (&mut self, attributes: I) -> &mut BytesStart<'a>","parent":null,"children":[],"decl_id":null,"docs":" Add additional attributes to this tag using an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":18325,"byte_end":18344,"line_start":159,"line_end":159,"column_start":12,"column_end":31},"name":"unescape_and_decode","qualname":"<BytesStart<'a>>::unescape_and_decode","value":"fn <B> (&self, reader: &Reader<B>) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Returns the unescaped and decoded string value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":18531,"byte_end":18545,"line_start":164,"line_end":164,"column_start":12,"column_end":26},"name":"push_attribute","qualname":"<BytesStart<'a>>::push_attribute","value":"fn <'b, A> (&mut self, attr: A) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds an attribute to this element.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":494},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":19024,"byte_end":19033,"line_start":179,"line_end":179,"column_start":12,"column_end":21},"name":"BytesDecl","qualname":"::events::BytesDecl","value":"BytesDecl {  }","parent":null,"children":[{"krate":0,"index":391}],"decl_id":null,"docs":" An XML declaration (`Event::Decl`).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":19158,"byte_end":19168,"line_start":185,"line_end":185,"column_start":12,"column_end":22},"name":"from_start","qualname":"<BytesDecl<'a>>::from_start","value":"fn (start: BytesStart<'a>) -> BytesDecl<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BytesDecl` from a `BytesStart`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":19318,"byte_end":19325,"line_start":190,"line_end":190,"column_start":12,"column_end":19},"name":"version","qualname":"<BytesDecl<'a>>::version","value":"fn (&self) -> Result<Cow<[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Gets xml version, including quotes (' or \")\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":19955,"byte_end":19963,"line_start":207,"line_end":207,"column_start":12,"column_end":20},"name":"encoding","qualname":"<BytesDecl<'a>>::encoding","value":"fn (&self) -> Option<Result<Cow<[u8]>>>","parent":null,"children":[],"decl_id":null,"docs":" Gets xml encoding, including quotes (' or \")\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":20392,"byte_end":20402,"line_start":222,"line_end":222,"column_start":12,"column_end":22},"name":"standalone","qualname":"<BytesDecl<'a>>::standalone","value":"fn (&self) -> Option<Result<Cow<[u8]>>>","parent":null,"children":[],"decl_id":null,"docs":" Gets xml standalone, including quotes (' or \")\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":21275,"byte_end":21278,"line_start":243,"line_end":243,"column_start":12,"column_end":15},"name":"new","qualname":"<BytesDecl<'a>>::new","value":"fn (version: &[u8], encoding: Option<&[u8]>, standalone: Option<&[u8]>) -> BytesDecl<'static>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `XmlDecl` from the (mandatory) _version_ (should be `1.0` or `1.1`),\n the optional _encoding_ (e.g., `UTF-8`) and the optional _standalone_ (`yes` or `no`)\n attribute.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":22497,"byte_end":22504,"line_start":284,"line_end":284,"column_start":12,"column_end":19},"name":"encoder","qualname":"<BytesDecl<'a>>::encoder","value":"fn (&self) -> Option<&'static Encoding>","parent":null,"children":[],"decl_id":null,"docs":" Gets the decoder struct\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":22719,"byte_end":22729,"line_start":291,"line_end":291,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<BytesDecl<'a>>::into_owned","value":"fn (self) -> BytesDecl<'static>","parent":null,"children":[],"decl_id":null,"docs":" Converts the event into an owned event.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":504},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":22925,"byte_end":22933,"line_start":300,"line_end":300,"column_start":12,"column_end":20},"name":"BytesEnd","qualname":"::events::BytesEnd","value":"BytesEnd {  }","parent":null,"children":[{"krate":0,"index":399}],"decl_id":null,"docs":" A struct to manage `Event::End` events\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":23068,"byte_end":23076,"line_start":307,"line_end":307,"column_start":12,"column_end":20},"name":"borrowed","qualname":"<BytesEnd<'a>>::borrowed","value":"fn (name: &'a [u8]) -> BytesEnd<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BytesEnd` borrowing a slice\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":23047,"byte_end":23056,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":23260,"byte_end":23265,"line_start":315,"line_end":315,"column_start":12,"column_end":17},"name":"owned","qualname":"<BytesEnd<'a>>::owned","value":"fn (name: Vec<u8>) -> BytesEnd<'static>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BytesEnd` owning its name\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":23239,"byte_end":23248,"line_start":314,"line_end":314,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":23435,"byte_end":23445,"line_start":322,"line_end":322,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<BytesEnd<'a>>::into_owned","value":"fn (self) -> BytesEnd<'static>","parent":null,"children":[],"decl_id":null,"docs":" Converts the event into an owned event.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":23625,"byte_end":23629,"line_start":330,"line_end":330,"column_start":12,"column_end":16},"name":"name","qualname":"<BytesEnd<'a>>::name","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Gets `BytesEnd` event name\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":23604,"byte_end":23613,"line_start":329,"line_end":329,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":23908,"byte_end":23918,"line_start":338,"line_end":338,"column_start":12,"column_end":22},"name":"local_name","qualname":"<BytesEnd<'a>>::local_name","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" local name (excluding namespace) as &[u8] (without eventual attributes)\n returns the name() with any leading namespace removed (all content up to\n and including the first ':' character)\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":23887,"byte_end":23896,"line_start":337,"line_end":337,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":514},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":24197,"byte_end":24206,"line_start":349,"line_end":349,"column_start":12,"column_end":21},"name":"BytesText","qualname":"::events::BytesText","value":"BytesText {  }","parent":null,"children":[{"krate":0,"index":407}],"decl_id":null,"docs":" Data from various events (most notably, `Event::Text`).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":24408,"byte_end":24420,"line_start":357,"line_end":357,"column_start":12,"column_end":24},"name":"from_escaped","qualname":"<BytesText<'a>>::from_escaped","value":"fn <C> (content: C) -> BytesText<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BytesText` from an escaped byte sequence.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":24387,"byte_end":24396,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":24688,"byte_end":24698,"line_start":366,"line_end":366,"column_start":12,"column_end":22},"name":"from_plain","qualname":"<BytesText<'a>>::from_plain","value":"fn (content: &'a [u8]) -> BytesText<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BytesText` from a byte sequence. The byte sequence is\n expected not to be escaped.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":24667,"byte_end":24676,"line_start":365,"line_end":365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":24895,"byte_end":24911,"line_start":374,"line_end":374,"column_start":12,"column_end":28},"name":"from_escaped_str","qualname":"<BytesText<'a>>::from_escaped_str","value":"fn <C> (content: C) -> BytesText<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BytesText` from an escaped string.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":24874,"byte_end":24883,"line_start":373,"line_end":373,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":25276,"byte_end":25290,"line_start":384,"line_end":384,"column_start":12,"column_end":26},"name":"from_plain_str","qualname":"<BytesText<'a>>::from_plain_str","value":"fn (content: &'a str) -> BytesText<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `BytesText` from a string. The string is expected not to\n be escaped.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":25255,"byte_end":25264,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":25498,"byte_end":25508,"line_start":391,"line_end":391,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<BytesText<'a>>::into_owned","value":"fn (self) -> BytesText<'static>","parent":null,"children":[],"decl_id":null,"docs":" Ensures that all data is owned to extend the object's lifetime if\n necessary.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":25477,"byte_end":25486,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":25855,"byte_end":25864,"line_start":401,"line_end":401,"column_start":12,"column_end":21},"name":"unescaped","qualname":"<BytesText<'a>>::unescaped","value":"fn (&self) -> Result<Cow<[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" gets escaped content","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":26225,"byte_end":26244,"line_start":411,"line_end":411,"column_start":12,"column_end":31},"name":"unescape_and_decode","qualname":"<BytesText<'a>>::unescape_and_decode","value":"fn <B> (&self, reader: &Reader<B>) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" helper method to unescape then decode self using the reader encoding","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":26418,"byte_end":26425,"line_start":416,"line_end":416,"column_start":12,"column_end":19},"name":"escaped","qualname":"<BytesText<'a>>::escaped","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Gets escaped content.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":415},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":26714,"byte_end":26719,"line_start":427,"line_end":427,"column_start":5,"column_end":10},"name":"Start","qualname":"::events::Event::Start","value":"Event::Start(BytesStart<'a>)","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Start tag (with attributes) `<tag attr=\"value\">`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":419},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":26767,"byte_end":26770,"line_start":429,"line_end":429,"column_start":5,"column_end":8},"name":"End","qualname":"::events::Event::End","value":"Event::End(BytesEnd<'a>)","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" End tag `</tag>`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":423},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":26858,"byte_end":26863,"line_start":431,"line_end":431,"column_start":5,"column_end":10},"name":"Empty","qualname":"::events::Event::Empty","value":"Event::Empty(BytesStart<'a>)","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Empty element tag (with attributes) `<tag attr=\"value\" />`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":427},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":26943,"byte_end":26947,"line_start":433,"line_end":433,"column_start":5,"column_end":9},"name":"Text","qualname":"::events::Event::Text","value":"Event::Text(BytesText<'a>)","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Character data between `Start` and `End` element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":431},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":27000,"byte_end":27007,"line_start":435,"line_end":435,"column_start":5,"column_end":12},"name":"Comment","qualname":"::events::Event::Comment","value":"Event::Comment(BytesText<'a>)","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Comment `<!-- ... -->`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":435},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":27061,"byte_end":27066,"line_start":437,"line_end":437,"column_start":5,"column_end":10},"name":"CData","qualname":"::events::Event::CData","value":"Event::CData(BytesText<'a>)","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" CData `<![CDATA[...]]>`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":439},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":27126,"byte_end":27130,"line_start":439,"line_end":439,"column_start":5,"column_end":9},"name":"Decl","qualname":"::events::Event::Decl","value":"Event::Decl(BytesDecl<'a>)","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" XML declaration `<?xml ...?>`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":443},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":27193,"byte_end":27195,"line_start":441,"line_end":441,"column_start":5,"column_end":7},"name":"PI","qualname":"::events::Event::PI","value":"Event::PI(BytesText<'a>)","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Processing instruction `<?...?>`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":447},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":27249,"byte_end":27256,"line_start":443,"line_end":443,"column_start":5,"column_end":12},"name":"DocType","qualname":"::events::Event::DocType","value":"Event::DocType(BytesText<'a>)","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Doctype `<!DOCTYPE...>`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":451},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":27306,"byte_end":27309,"line_start":445,"line_end":445,"column_start":5,"column_end":8},"name":"Eof","qualname":"::events::Event::Eof","value":"Event::Eof","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" End of XML document.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":524},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":26640,"byte_end":26645,"line_start":425,"line_end":425,"column_start":10,"column_end":15},"name":"Event","qualname":"::events::Event","value":"Event::{Start, End, Empty, Text, Comment, CData, Decl, PI, DocType, Eof}","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":419},{"krate":0,"index":423},{"krate":0,"index":427},{"krate":0,"index":431},{"krate":0,"index":435},{"krate":0,"index":439},{"krate":0,"index":443},{"krate":0,"index":447},{"krate":0,"index":451}],"decl_id":null,"docs":" Event emitted by [`Reader::read_event`].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":27495,"byte_end":27505,"line_start":451,"line_end":451,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<Event<'a>>::into_owned","value":"fn (self) -> Event<'static>","parent":null,"children":[],"decl_id":null,"docs":" Converts the event to an owned version, untied to the lifetime of\n buffer used when reading but incurring a new, seperate allocation.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":300},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":44112,"byte_end":44118,"line_start":63,"line_end":63,"column_start":12,"column_end":18},"name":"Reader","qualname":"::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":155}],"decl_id":null,"docs":" A low level encoding-agnostic XML event reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":45120,"byte_end":45131,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"from_reader","qualname":"<Reader<B>>::from_reader","value":"fn (reader: B) -> Reader<B>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Reader` that reads from a reader implementing `BufRead`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":46197,"byte_end":46218,"line_start":118,"line_end":118,"column_start":12,"column_end":33},"name":"expand_empty_elements","qualname":"<Reader<B>>::expand_empty_elements","value":"fn (&mut self, val: bool) -> &mut Reader<B>","parent":null,"children":[],"decl_id":null,"docs":" Changes whether empty elements should be split into an `Open` and a `Close` event.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":46640,"byte_end":46649,"line_start":131,"line_end":131,"column_start":12,"column_end":21},"name":"trim_text","qualname":"<Reader<B>>::trim_text","value":"fn (&mut self, val: bool) -> &mut Reader<B>","parent":null,"children":[],"decl_id":null,"docs":" Changes whether whitespace before and after character data should be removed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":47350,"byte_end":47365,"line_start":149,"line_end":149,"column_start":12,"column_end":27},"name":"check_end_names","qualname":"<Reader<B>>::check_end_names","value":"fn (&mut self, val: bool) -> &mut Reader<B>","parent":null,"children":[],"decl_id":null,"docs":" Changes whether mismatched closing tag names should be detected.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":47953,"byte_end":47967,"line_start":164,"line_end":164,"column_start":12,"column_end":26},"name":"check_comments","qualname":"<Reader<B>>::check_comments","value":"fn (&mut self, val: bool) -> &mut Reader<B>","parent":null,"children":[],"decl_id":null,"docs":" Changes whether comments should be validated.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":48180,"byte_end":48195,"line_start":172,"line_end":172,"column_start":12,"column_end":27},"name":"buffer_position","qualname":"<Reader<B>>::buffer_position","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the current byte position in the input data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":61177,"byte_end":61187,"line_start":485,"line_end":485,"column_start":12,"column_end":22},"name":"read_event","qualname":"<Reader<B>>::read_event","value":"fn <'a, 'b> (&'a mut self, buf: &'b mut Vec<u8>) -> Result<Event<'b>>","parent":null,"children":[],"decl_id":null,"docs":" Reads the next `Event`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":62181,"byte_end":62198,"line_start":507,"line_end":507,"column_start":12,"column_end":29},"name":"resolve_namespace","qualname":"<Reader<B>>::resolve_namespace","value":"fn <'a, 'b, 'c> (&'a self, qname: &'b [u8], namespace_buffer: &'c [u8]) -> (Option<&'c [u8]>, &'b [u8])","parent":null,"children":[],"decl_id":null,"docs":" Resolves a potentially qualified **attribute name** into (namespace name, local name).","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":62160,"byte_end":62169,"line_start":506,"line_end":506,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":64106,"byte_end":64127,"line_start":557,"line_end":557,"column_start":12,"column_end":33},"name":"read_namespaced_event","qualname":"<Reader<B>>::read_namespaced_event","value":"fn <'a, 'b, 'c> (&'a mut self, buf: &'b mut Vec<u8>, namespace_buffer: &'c mut Vec<u8>) -> Result<(Option<&'c [u8]>, Event<'b>)>","parent":null,"children":[],"decl_id":null,"docs":" Reads the next event and resolves its namespace (if applicable).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":66399,"byte_end":66407,"line_start":611,"line_end":611,"column_start":12,"column_end":20},"name":"encoding","qualname":"<Reader<B>>::encoding","value":"fn (&self) -> &'static Encoding","parent":null,"children":[],"decl_id":null,"docs":" Returns the `Reader`s encoding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":66769,"byte_end":66775,"line_start":622,"line_end":622,"column_start":12,"column_end":18},"name":"decode","qualname":"<Reader<B>>::decode","value":"fn <'b, 'c> (&'b self, bytes: &'c [u8]) -> Cow<'c, str>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a slice using the encoding specified in the XML declaration.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":66748,"byte_end":66757,"line_start":621,"line_end":621,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":67014,"byte_end":67025,"line_start":629,"line_end":629,"column_start":12,"column_end":23},"name":"read_to_end","qualname":"<Reader<B>>::read_to_end","value":"fn <K> (&mut self, end: K, buf: &mut Vec<u8>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Reads until end element is found","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":68978,"byte_end":68987,"line_start":685,"line_end":685,"column_start":12,"column_end":21},"name":"read_text","qualname":"<Reader<B>>::read_text","value":"fn <K> (&mut self, end: K, buf: &mut Vec<u8>) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Reads optional text between start and end tags.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":69590,"byte_end":69599,"line_start":700,"line_end":700,"column_start":12,"column_end":21},"name":"from_file","qualname":"<Reader<BufReader<File>>>::from_file","value":"fn <P> (path: P) -> Result<Reader<BufReader<File>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an XML reader from a file path.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":69901,"byte_end":69909,"line_start":709,"line_end":709,"column_start":12,"column_end":20},"name":"from_str","qualname":"<Reader<&'a [u8]>>::from_str","value":"fn (s: &'a str) -> Reader<&'a [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Creates an XML reader from a string slice.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":558},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":82947,"byte_end":82953,"line_start":64,"line_end":64,"column_start":12,"column_end":18},"name":"Writer","qualname":"::writer::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":481}],"decl_id":null,"docs":" XML writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":83127,"byte_end":83130,"line_start":72,"line_end":72,"column_start":12,"column_end":15},"name":"new","qualname":"<Writer<W>>::new","value":"fn (inner: W) -> Writer<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a Writer from a generic Write\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":83335,"byte_end":83350,"line_start":80,"line_end":80,"column_start":12,"column_end":27},"name":"new_with_indent","qualname":"<Writer<W>>::new_with_indent","value":"fn (inner: W, indent_char: u8, indent_size: usize) -> Writer<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a Writer with configured whitespace indents from a generic Write\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":83620,"byte_end":83630,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Writer<W>>::into_inner","value":"fn (self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `Writer`, returning the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":83739,"byte_end":83750,"line_start":93,"line_end":93,"column_start":12,"column_end":23},"name":"write_event","qualname":"<Writer<W>>::write_event","value":"fn <'a, E> (&mut self, event: E) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Writes the given event to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":85171,"byte_end":85176,"line_start":129,"line_end":129,"column_start":12,"column_end":17},"name":"write","qualname":"<Writer<W>>::write","value":"fn (&mut self, value: &[u8]) -> Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Writes bytes\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":85150,"byte_end":85159,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]}],"impls":[{"id":4,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":32040,"byte_end":32050,"line_start":33,"line_end":33,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":33862,"byte_end":33871,"line_start":88,"line_end":88,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":35044,"byte_end":35053,"line_start":115,"line_end":115,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":35659,"byte_end":35668,"line_start":135,"line_end":135,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":36254,"byte_end":36264,"line_start":155,"line_end":155,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":14335,"byte_end":14345,"line_start":37,"line_end":37,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":19081,"byte_end":19090,"line_start":183,"line_end":183,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":22977,"byte_end":22985,"line_start":304,"line_end":304,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":24302,"byte_end":24311,"line_start":354,"line_end":354,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":27323,"byte_end":27328,"line_start":448,"line_end":448,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":28172,"byte_end":28182,"line_start":467,"line_end":467,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":28291,"byte_end":28300,"line_start":474,"line_end":474,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":28413,"byte_end":28421,"line_start":481,"line_end":481,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":28531,"byte_end":28540,"line_start":488,"line_end":488,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":28653,"byte_end":28658,"line_start":495,"line_end":495,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":29161,"byte_end":29166,"line_start":512,"line_end":512,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":45021,"byte_end":45027,"line_start":89,"line_end":89,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":340},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":69505,"byte_end":69511,"line_start":698,"line_end":698,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":69820,"byte_end":69826,"line_start":707,"line_end":707,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":75168,"byte_end":75177,"line_start":853,"line_end":853,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":76536,"byte_end":76556,"line_start":892,"line_end":892,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":83058,"byte_end":83064,"line_start":70,"line_end":70,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":85978,"byte_end":85989,"line_start":157,"line_end":157,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4125,"byte_end":4131,"line_start":115,"line_end":115,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":50}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":13404,"byte_end":13414,"line_start":3,"line_end":3,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":52}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":32040,"byte_end":32050,"line_start":33,"line_end":33,"column_start":10,"column_end":20},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":462},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":33862,"byte_end":33871,"line_start":88,"line_end":88,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":35044,"byte_end":35053,"line_start":115,"line_end":115,"column_start":41,"column_end":50},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":468},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":35659,"byte_end":35668,"line_start":135,"line_end":135,"column_start":39,"column_end":48},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":468},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,97,116,116,114,105,98,117,116,101,115,46,114,115],"byte_start":36254,"byte_end":36264,"line_start":155,"line_end":155,"column_start":23,"column_end":33},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":462},"to":{"krate":2,"index":3888}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":14335,"byte_end":14345,"line_start":37,"line_end":37,"column_start":10,"column_end":20},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":484},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":19081,"byte_end":19090,"line_start":183,"line_end":183,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":22977,"byte_end":22985,"line_start":304,"line_end":304,"column_start":10,"column_end":18},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":24302,"byte_end":24311,"line_start":354,"line_end":354,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":27323,"byte_end":27328,"line_start":448,"line_end":448,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":28172,"byte_end":28182,"line_start":467,"line_end":467,"column_start":20,"column_end":30},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":484},"to":{"krate":2,"index":1916}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":28291,"byte_end":28300,"line_start":474,"line_end":474,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":494},"to":{"krate":2,"index":1916}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":28413,"byte_end":28421,"line_start":481,"line_end":481,"column_start":20,"column_end":28},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":504},"to":{"krate":2,"index":1916}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":28531,"byte_end":28540,"line_start":488,"line_end":488,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":514},"to":{"krate":2,"index":1916}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":28653,"byte_end":28658,"line_start":495,"line_end":495,"column_start":20,"column_end":25},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":524},"to":{"krate":2,"index":1916}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,101,118,101,110,116,115,47,109,111,100,46,114,115],"byte_start":29161,"byte_end":29166,"line_start":512,"line_end":512,"column_start":31,"column_end":36},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":524},"to":{"krate":2,"index":2594}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":45021,"byte_end":45027,"line_start":89,"line_end":89,"column_start":18,"column_end":24},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":69505,"byte_end":69511,"line_start":698,"line_end":698,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":69820,"byte_end":69826,"line_start":707,"line_end":707,"column_start":10,"column_end":16},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":75168,"byte_end":75177,"line_start":853,"line_end":853,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":76536,"byte_end":76556,"line_start":892,"line_end":892,"column_start":6,"column_end":26},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":83058,"byte_end":83064,"line_start":70,"line_end":70,"column_start":16,"column_end":22},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,97,114,111,110,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,113,117,105,99,107,45,120,109,108,45,48,46,49,50,46,52,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":85978,"byte_end":85989,"line_start":157,"line_end":157,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":564},"to":{"krate":4294967295,"index":4294967295}}]}